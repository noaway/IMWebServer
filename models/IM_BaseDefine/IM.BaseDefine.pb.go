// Code generated by protoc-gen-go.
// source: IM.BaseDefine.proto
// DO NOT EDIT!

/*
Package IM_BaseDefine is a generated protocol buffer package.

It is generated from these files:
	IM.BaseDefine.proto

It has these top-level messages:
	IpAddr
	UserInfo
	ContactSessionInfo
	ContactSesAndUnreadCntInfo
	UserStat
	ServerUserStat
	UnreadInfo
	MsgInfo
	GroupVersionInfo
	GroupInfo
	UserTokenInfo
	PushResult
	ShieldStatus
	OfflineFileInfo
	DepartInfo
*/
package IM_BaseDefine

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// service id
type ServiceID int32

const (
	ServiceID_SID_LOGIN          ServiceID = 1
	ServiceID_SID_BUDDY_LIST     ServiceID = 2
	ServiceID_SID_MSG            ServiceID = 3
	ServiceID_SID_GROUP          ServiceID = 4
	ServiceID_SID_FILE           ServiceID = 5
	ServiceID_SID_SWITCH_SERVICE ServiceID = 6
	ServiceID_SID_OTHER          ServiceID = 7
	ServiceID_SID_INTERNAL       ServiceID = 8
)

var ServiceID_name = map[int32]string{
	1: "SID_LOGIN",
	2: "SID_BUDDY_LIST",
	3: "SID_MSG",
	4: "SID_GROUP",
	5: "SID_FILE",
	6: "SID_SWITCH_SERVICE",
	7: "SID_OTHER",
	8: "SID_INTERNAL",
}
var ServiceID_value = map[string]int32{
	"SID_LOGIN":          1,
	"SID_BUDDY_LIST":     2,
	"SID_MSG":            3,
	"SID_GROUP":          4,
	"SID_FILE":           5,
	"SID_SWITCH_SERVICE": 6,
	"SID_OTHER":          7,
	"SID_INTERNAL":       8,
}

func (x ServiceID) Enum() *ServiceID {
	p := new(ServiceID)
	*p = x
	return p
}
func (x ServiceID) String() string {
	return proto.EnumName(ServiceID_name, int32(x))
}
func (x *ServiceID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ServiceID_value, data, "ServiceID")
	if err != nil {
		return err
	}
	*x = ServiceID(value)
	return nil
}
func (ServiceID) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// command id for login
type LoginCmdID int32

const (
	LoginCmdID_CID_LOGIN_REQ_MSGSERVER             LoginCmdID = 257
	LoginCmdID_CID_LOGIN_RES_MSGSERVER             LoginCmdID = 258
	LoginCmdID_CID_LOGIN_REQ_USERLOGIN             LoginCmdID = 259
	LoginCmdID_CID_LOGIN_RES_USERLOGIN             LoginCmdID = 260
	LoginCmdID_CID_LOGIN_REQ_LOGINOUT              LoginCmdID = 261
	LoginCmdID_CID_LOGIN_RES_LOGINOUT              LoginCmdID = 262
	LoginCmdID_CID_LOGIN_KICK_USER                 LoginCmdID = 263
	LoginCmdID_CID_LOGIN_REQ_DEVICETOKEN           LoginCmdID = 264
	LoginCmdID_CID_LOGIN_RES_DEVICETOKEN           LoginCmdID = 265
	LoginCmdID_CID_LOGIN_REQ_KICKPCCLIENT          LoginCmdID = 266
	LoginCmdID_CID_LOGIN_RES_KICKPCCLIENT          LoginCmdID = 267
	LoginCmdID_CID_LOGIN_REQ_USERLOGIN_ACCESSTOKEN LoginCmdID = 268
)

var LoginCmdID_name = map[int32]string{
	257: "CID_LOGIN_REQ_MSGSERVER",
	258: "CID_LOGIN_RES_MSGSERVER",
	259: "CID_LOGIN_REQ_USERLOGIN",
	260: "CID_LOGIN_RES_USERLOGIN",
	261: "CID_LOGIN_REQ_LOGINOUT",
	262: "CID_LOGIN_RES_LOGINOUT",
	263: "CID_LOGIN_KICK_USER",
	264: "CID_LOGIN_REQ_DEVICETOKEN",
	265: "CID_LOGIN_RES_DEVICETOKEN",
	266: "CID_LOGIN_REQ_KICKPCCLIENT",
	267: "CID_LOGIN_RES_KICKPCCLIENT",
	268: "CID_LOGIN_REQ_USERLOGIN_ACCESSTOKEN",
}
var LoginCmdID_value = map[string]int32{
	"CID_LOGIN_REQ_MSGSERVER":             257,
	"CID_LOGIN_RES_MSGSERVER":             258,
	"CID_LOGIN_REQ_USERLOGIN":             259,
	"CID_LOGIN_RES_USERLOGIN":             260,
	"CID_LOGIN_REQ_LOGINOUT":              261,
	"CID_LOGIN_RES_LOGINOUT":              262,
	"CID_LOGIN_KICK_USER":                 263,
	"CID_LOGIN_REQ_DEVICETOKEN":           264,
	"CID_LOGIN_RES_DEVICETOKEN":           265,
	"CID_LOGIN_REQ_KICKPCCLIENT":          266,
	"CID_LOGIN_RES_KICKPCCLIENT":          267,
	"CID_LOGIN_REQ_USERLOGIN_ACCESSTOKEN": 268,
}

func (x LoginCmdID) Enum() *LoginCmdID {
	p := new(LoginCmdID)
	*p = x
	return p
}
func (x LoginCmdID) String() string {
	return proto.EnumName(LoginCmdID_name, int32(x))
}
func (x *LoginCmdID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LoginCmdID_value, data, "LoginCmdID")
	if err != nil {
		return err
	}
	*x = LoginCmdID(value)
	return nil
}
func (LoginCmdID) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// command id for buddy list
type BuddyListCmdID int32

const (
	BuddyListCmdID_CID_BUDDY_LIST_RECENT_CONTACT_SESSION_REQUEST    BuddyListCmdID = 513
	BuddyListCmdID_CID_BUDDY_LIST_RECENT_CONTACT_SESSION_RESPONSE   BuddyListCmdID = 514
	BuddyListCmdID_CID_BUDDY_LIST_STATUS_NOTIFY                     BuddyListCmdID = 515
	BuddyListCmdID_CID_BUDDY_LIST_USER_INFO_REQUEST                 BuddyListCmdID = 516
	BuddyListCmdID_CID_BUDDY_LIST_USER_INFO_RESPONSE                BuddyListCmdID = 517
	BuddyListCmdID_CID_BUDDY_LIST_REMOVE_SESSION_REQ                BuddyListCmdID = 518
	BuddyListCmdID_CID_BUDDY_LIST_REMOVE_SESSION_RES                BuddyListCmdID = 519
	BuddyListCmdID_CID_BUDDY_LIST_ALL_USER_REQUEST                  BuddyListCmdID = 520
	BuddyListCmdID_CID_BUDDY_LIST_ALL_USER_RESPONSE                 BuddyListCmdID = 521
	BuddyListCmdID_CID_BUDDY_LIST_USERS_STATUS_REQUEST              BuddyListCmdID = 522
	BuddyListCmdID_CID_BUDDY_LIST_USERS_STATUS_RESPONSE             BuddyListCmdID = 523
	BuddyListCmdID_CID_BUDDY_LIST_CHANGE_AVATAR_REQUEST             BuddyListCmdID = 524
	BuddyListCmdID_CID_BUDDY_LIST_CHANGE_AVATAR_RESPONSE            BuddyListCmdID = 525
	BuddyListCmdID_CID_BUDDY_LIST_PC_LOGIN_STATUS_NOTIFY            BuddyListCmdID = 526
	BuddyListCmdID_CID_BUDDY_LIST_REMOVE_SESSION_NOTIFY             BuddyListCmdID = 527
	BuddyListCmdID_CID_BUDDY_LIST_DEPARTMENT_REQUEST                BuddyListCmdID = 528
	BuddyListCmdID_CID_BUDDY_LIST_DEPARTMENT_RESPONSE               BuddyListCmdID = 529
	BuddyListCmdID_CID_BUDDY_LIST_RECENT_SESSION_AND_UNREAD_CNT_REQ BuddyListCmdID = 530
	BuddyListCmdID_CID_BUDDY_LIST_RECENT_SESSION_AND_UNREAD_CNT_RES BuddyListCmdID = 531
)

var BuddyListCmdID_name = map[int32]string{
	513: "CID_BUDDY_LIST_RECENT_CONTACT_SESSION_REQUEST",
	514: "CID_BUDDY_LIST_RECENT_CONTACT_SESSION_RESPONSE",
	515: "CID_BUDDY_LIST_STATUS_NOTIFY",
	516: "CID_BUDDY_LIST_USER_INFO_REQUEST",
	517: "CID_BUDDY_LIST_USER_INFO_RESPONSE",
	518: "CID_BUDDY_LIST_REMOVE_SESSION_REQ",
	519: "CID_BUDDY_LIST_REMOVE_SESSION_RES",
	520: "CID_BUDDY_LIST_ALL_USER_REQUEST",
	521: "CID_BUDDY_LIST_ALL_USER_RESPONSE",
	522: "CID_BUDDY_LIST_USERS_STATUS_REQUEST",
	523: "CID_BUDDY_LIST_USERS_STATUS_RESPONSE",
	524: "CID_BUDDY_LIST_CHANGE_AVATAR_REQUEST",
	525: "CID_BUDDY_LIST_CHANGE_AVATAR_RESPONSE",
	526: "CID_BUDDY_LIST_PC_LOGIN_STATUS_NOTIFY",
	527: "CID_BUDDY_LIST_REMOVE_SESSION_NOTIFY",
	528: "CID_BUDDY_LIST_DEPARTMENT_REQUEST",
	529: "CID_BUDDY_LIST_DEPARTMENT_RESPONSE",
	530: "CID_BUDDY_LIST_RECENT_SESSION_AND_UNREAD_CNT_REQ",
	531: "CID_BUDDY_LIST_RECENT_SESSION_AND_UNREAD_CNT_RES",
}
var BuddyListCmdID_value = map[string]int32{
	"CID_BUDDY_LIST_RECENT_CONTACT_SESSION_REQUEST":    513,
	"CID_BUDDY_LIST_RECENT_CONTACT_SESSION_RESPONSE":   514,
	"CID_BUDDY_LIST_STATUS_NOTIFY":                     515,
	"CID_BUDDY_LIST_USER_INFO_REQUEST":                 516,
	"CID_BUDDY_LIST_USER_INFO_RESPONSE":                517,
	"CID_BUDDY_LIST_REMOVE_SESSION_REQ":                518,
	"CID_BUDDY_LIST_REMOVE_SESSION_RES":                519,
	"CID_BUDDY_LIST_ALL_USER_REQUEST":                  520,
	"CID_BUDDY_LIST_ALL_USER_RESPONSE":                 521,
	"CID_BUDDY_LIST_USERS_STATUS_REQUEST":              522,
	"CID_BUDDY_LIST_USERS_STATUS_RESPONSE":             523,
	"CID_BUDDY_LIST_CHANGE_AVATAR_REQUEST":             524,
	"CID_BUDDY_LIST_CHANGE_AVATAR_RESPONSE":            525,
	"CID_BUDDY_LIST_PC_LOGIN_STATUS_NOTIFY":            526,
	"CID_BUDDY_LIST_REMOVE_SESSION_NOTIFY":             527,
	"CID_BUDDY_LIST_DEPARTMENT_REQUEST":                528,
	"CID_BUDDY_LIST_DEPARTMENT_RESPONSE":               529,
	"CID_BUDDY_LIST_RECENT_SESSION_AND_UNREAD_CNT_REQ": 530,
	"CID_BUDDY_LIST_RECENT_SESSION_AND_UNREAD_CNT_RES": 531,
}

func (x BuddyListCmdID) Enum() *BuddyListCmdID {
	p := new(BuddyListCmdID)
	*p = x
	return p
}
func (x BuddyListCmdID) String() string {
	return proto.EnumName(BuddyListCmdID_name, int32(x))
}
func (x *BuddyListCmdID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BuddyListCmdID_value, data, "BuddyListCmdID")
	if err != nil {
		return err
	}
	*x = BuddyListCmdID(value)
	return nil
}
func (BuddyListCmdID) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// command id for msg
type MessageCmdID int32

const (
	MessageCmdID_CID_MSG_DATA                  MessageCmdID = 769
	MessageCmdID_CID_MSG_DATA_ACK              MessageCmdID = 770
	MessageCmdID_CID_MSG_READ_ACK              MessageCmdID = 771
	MessageCmdID_CID_MSG_READ_NOTIFY           MessageCmdID = 772
	MessageCmdID_CID_MSG_TIME_REQUEST          MessageCmdID = 773
	MessageCmdID_CID_MSG_TIME_RESPONSE         MessageCmdID = 774
	MessageCmdID_CID_MSG_UNREAD_CNT_REQUEST    MessageCmdID = 775
	MessageCmdID_CID_MSG_UNREAD_CNT_RESPONSE   MessageCmdID = 776
	MessageCmdID_CID_MSG_LIST_REQUEST          MessageCmdID = 777
	MessageCmdID_CID_MSG_LIST_RESPONSE         MessageCmdID = 778
	MessageCmdID_CID_MSG_GET_LATEST_MSG_ID_REQ MessageCmdID = 779
	MessageCmdID_CID_MSG_GET_LATEST_MSG_ID_RSP MessageCmdID = 780
	MessageCmdID_CID_MSG_GET_BY_MSG_ID_REQ     MessageCmdID = 781
	MessageCmdID_CID_MSG_GET_BY_MSG_ID_RES     MessageCmdID = 782
)

var MessageCmdID_name = map[int32]string{
	769: "CID_MSG_DATA",
	770: "CID_MSG_DATA_ACK",
	771: "CID_MSG_READ_ACK",
	772: "CID_MSG_READ_NOTIFY",
	773: "CID_MSG_TIME_REQUEST",
	774: "CID_MSG_TIME_RESPONSE",
	775: "CID_MSG_UNREAD_CNT_REQUEST",
	776: "CID_MSG_UNREAD_CNT_RESPONSE",
	777: "CID_MSG_LIST_REQUEST",
	778: "CID_MSG_LIST_RESPONSE",
	779: "CID_MSG_GET_LATEST_MSG_ID_REQ",
	780: "CID_MSG_GET_LATEST_MSG_ID_RSP",
	781: "CID_MSG_GET_BY_MSG_ID_REQ",
	782: "CID_MSG_GET_BY_MSG_ID_RES",
}
var MessageCmdID_value = map[string]int32{
	"CID_MSG_DATA":                  769,
	"CID_MSG_DATA_ACK":              770,
	"CID_MSG_READ_ACK":              771,
	"CID_MSG_READ_NOTIFY":           772,
	"CID_MSG_TIME_REQUEST":          773,
	"CID_MSG_TIME_RESPONSE":         774,
	"CID_MSG_UNREAD_CNT_REQUEST":    775,
	"CID_MSG_UNREAD_CNT_RESPONSE":   776,
	"CID_MSG_LIST_REQUEST":          777,
	"CID_MSG_LIST_RESPONSE":         778,
	"CID_MSG_GET_LATEST_MSG_ID_REQ": 779,
	"CID_MSG_GET_LATEST_MSG_ID_RSP": 780,
	"CID_MSG_GET_BY_MSG_ID_REQ":     781,
	"CID_MSG_GET_BY_MSG_ID_RES":     782,
}

func (x MessageCmdID) Enum() *MessageCmdID {
	p := new(MessageCmdID)
	*p = x
	return p
}
func (x MessageCmdID) String() string {
	return proto.EnumName(MessageCmdID_name, int32(x))
}
func (x *MessageCmdID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MessageCmdID_value, data, "MessageCmdID")
	if err != nil {
		return err
	}
	*x = MessageCmdID(value)
	return nil
}
func (MessageCmdID) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// command id for group message
type GroupCmdID int32

const (
	GroupCmdID_CID_GROUP_NORMAL_LIST_REQUEST    GroupCmdID = 1025
	GroupCmdID_CID_GROUP_NORMAL_LIST_RESPONSE   GroupCmdID = 1026
	GroupCmdID_CID_GROUP_INFO_REQUEST           GroupCmdID = 1027
	GroupCmdID_CID_GROUP_INFO_RESPONSE          GroupCmdID = 1028
	GroupCmdID_CID_GROUP_CREATE_REQUEST         GroupCmdID = 1029
	GroupCmdID_CID_GROUP_CREATE_RESPONSE        GroupCmdID = 1030
	GroupCmdID_CID_GROUP_CHANGE_MEMBER_REQUEST  GroupCmdID = 1031
	GroupCmdID_CID_GROUP_CHANGE_MEMBER_RESPONSE GroupCmdID = 1032
	GroupCmdID_CID_GROUP_SHIELD_GROUP_REQUEST   GroupCmdID = 1033
	GroupCmdID_CID_GROUP_SHIELD_GROUP_RESPONSE  GroupCmdID = 1034
	GroupCmdID_CID_GROUP_CHANGE_MEMBER_NOTIFY   GroupCmdID = 1035
)

var GroupCmdID_name = map[int32]string{
	1025: "CID_GROUP_NORMAL_LIST_REQUEST",
	1026: "CID_GROUP_NORMAL_LIST_RESPONSE",
	1027: "CID_GROUP_INFO_REQUEST",
	1028: "CID_GROUP_INFO_RESPONSE",
	1029: "CID_GROUP_CREATE_REQUEST",
	1030: "CID_GROUP_CREATE_RESPONSE",
	1031: "CID_GROUP_CHANGE_MEMBER_REQUEST",
	1032: "CID_GROUP_CHANGE_MEMBER_RESPONSE",
	1033: "CID_GROUP_SHIELD_GROUP_REQUEST",
	1034: "CID_GROUP_SHIELD_GROUP_RESPONSE",
	1035: "CID_GROUP_CHANGE_MEMBER_NOTIFY",
}
var GroupCmdID_value = map[string]int32{
	"CID_GROUP_NORMAL_LIST_REQUEST":    1025,
	"CID_GROUP_NORMAL_LIST_RESPONSE":   1026,
	"CID_GROUP_INFO_REQUEST":           1027,
	"CID_GROUP_INFO_RESPONSE":          1028,
	"CID_GROUP_CREATE_REQUEST":         1029,
	"CID_GROUP_CREATE_RESPONSE":        1030,
	"CID_GROUP_CHANGE_MEMBER_REQUEST":  1031,
	"CID_GROUP_CHANGE_MEMBER_RESPONSE": 1032,
	"CID_GROUP_SHIELD_GROUP_REQUEST":   1033,
	"CID_GROUP_SHIELD_GROUP_RESPONSE":  1034,
	"CID_GROUP_CHANGE_MEMBER_NOTIFY":   1035,
}

func (x GroupCmdID) Enum() *GroupCmdID {
	p := new(GroupCmdID)
	*p = x
	return p
}
func (x GroupCmdID) String() string {
	return proto.EnumName(GroupCmdID_name, int32(x))
}
func (x *GroupCmdID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GroupCmdID_value, data, "GroupCmdID")
	if err != nil {
		return err
	}
	*x = GroupCmdID(value)
	return nil
}
func (GroupCmdID) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type FileCmdID int32

const (
	FileCmdID_CID_FILE_LOGIN_REQ     FileCmdID = 1281
	FileCmdID_CID_FILE_LOGIN_RES     FileCmdID = 1282
	FileCmdID_CID_FILE_STATE         FileCmdID = 1283
	FileCmdID_CID_FILE_PULL_DATA_REQ FileCmdID = 1284
	FileCmdID_CID_FILE_PULL_DATA_RSP FileCmdID = 1285
	// To MsgServer
	FileCmdID_CID_FILE_REQUEST         FileCmdID = 1286
	FileCmdID_CID_FILE_RESPONSE        FileCmdID = 1287
	FileCmdID_CID_FILE_NOTIFY          FileCmdID = 1288
	FileCmdID_CID_FILE_HAS_OFFLINE_REQ FileCmdID = 1289
	FileCmdID_CID_FILE_HAS_OFFLINE_RES FileCmdID = 1290
	FileCmdID_CID_FILE_ADD_OFFLINE_REQ FileCmdID = 1291
	FileCmdID_CID_FILE_DEL_OFFLINE_REQ FileCmdID = 1292
)

var FileCmdID_name = map[int32]string{
	1281: "CID_FILE_LOGIN_REQ",
	1282: "CID_FILE_LOGIN_RES",
	1283: "CID_FILE_STATE",
	1284: "CID_FILE_PULL_DATA_REQ",
	1285: "CID_FILE_PULL_DATA_RSP",
	1286: "CID_FILE_REQUEST",
	1287: "CID_FILE_RESPONSE",
	1288: "CID_FILE_NOTIFY",
	1289: "CID_FILE_HAS_OFFLINE_REQ",
	1290: "CID_FILE_HAS_OFFLINE_RES",
	1291: "CID_FILE_ADD_OFFLINE_REQ",
	1292: "CID_FILE_DEL_OFFLINE_REQ",
}
var FileCmdID_value = map[string]int32{
	"CID_FILE_LOGIN_REQ":       1281,
	"CID_FILE_LOGIN_RES":       1282,
	"CID_FILE_STATE":           1283,
	"CID_FILE_PULL_DATA_REQ":   1284,
	"CID_FILE_PULL_DATA_RSP":   1285,
	"CID_FILE_REQUEST":         1286,
	"CID_FILE_RESPONSE":        1287,
	"CID_FILE_NOTIFY":          1288,
	"CID_FILE_HAS_OFFLINE_REQ": 1289,
	"CID_FILE_HAS_OFFLINE_RES": 1290,
	"CID_FILE_ADD_OFFLINE_REQ": 1291,
	"CID_FILE_DEL_OFFLINE_REQ": 1292,
}

func (x FileCmdID) Enum() *FileCmdID {
	p := new(FileCmdID)
	*p = x
	return p
}
func (x FileCmdID) String() string {
	return proto.EnumName(FileCmdID_name, int32(x))
}
func (x *FileCmdID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FileCmdID_value, data, "FileCmdID")
	if err != nil {
		return err
	}
	*x = FileCmdID(value)
	return nil
}
func (FileCmdID) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// command id for switch service
type SwitchServiceCmdID int32

const (
	SwitchServiceCmdID_CID_SWITCH_P2P_CMD SwitchServiceCmdID = 1537
)

var SwitchServiceCmdID_name = map[int32]string{
	1537: "CID_SWITCH_P2P_CMD",
}
var SwitchServiceCmdID_value = map[string]int32{
	"CID_SWITCH_P2P_CMD": 1537,
}

func (x SwitchServiceCmdID) Enum() *SwitchServiceCmdID {
	p := new(SwitchServiceCmdID)
	*p = x
	return p
}
func (x SwitchServiceCmdID) String() string {
	return proto.EnumName(SwitchServiceCmdID_name, int32(x))
}
func (x *SwitchServiceCmdID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SwitchServiceCmdID_value, data, "SwitchServiceCmdID")
	if err != nil {
		return err
	}
	*x = SwitchServiceCmdID(value)
	return nil
}
func (SwitchServiceCmdID) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type OtherCmdID int32

const (
	OtherCmdID_CID_OTHER_HEARTBEAT                 OtherCmdID = 1793
	OtherCmdID_CID_OTHER_STOP_RECV_PACKET          OtherCmdID = 1794
	OtherCmdID_CID_OTHER_VALIDATE_REQ              OtherCmdID = 1795
	OtherCmdID_CID_OTHER_VALIDATE_RSP              OtherCmdID = 1796
	OtherCmdID_CID_OTHER_GET_DEVICE_TOKEN_REQ      OtherCmdID = 1797
	OtherCmdID_CID_OTHER_GET_DEVICE_TOKEN_RSP      OtherCmdID = 1798
	OtherCmdID_CID_OTHER_ROLE_SET                  OtherCmdID = 1799
	OtherCmdID_CID_OTHER_ONLINE_USER_INFO          OtherCmdID = 1800
	OtherCmdID_CID_OTHER_MSG_SERV_INFO             OtherCmdID = 1801
	OtherCmdID_CID_OTHER_USER_STATUS_UPDATE        OtherCmdID = 1802
	OtherCmdID_CID_OTHER_USER_CNT_UPDATE           OtherCmdID = 1803
	OtherCmdID_CID_OTHER_SERVER_KICK_USER          OtherCmdID = 1805
	OtherCmdID_CID_OTHER_LOGIN_STATUS_NOTIFY       OtherCmdID = 1806
	OtherCmdID_CID_OTHER_PUSH_TO_USER_REQ          OtherCmdID = 1807
	OtherCmdID_CID_OTHER_PUSH_TO_USER_RSP          OtherCmdID = 1808
	OtherCmdID_CID_OTHER_GET_SHIELD_REQ            OtherCmdID = 1809
	OtherCmdID_CID_OTHER_GET_SHIELD_RSP            OtherCmdID = 1810
	OtherCmdID_CID_OTHER_FILE_TRANSFER_REQ         OtherCmdID = 1841
	OtherCmdID_CID_OTHER_FILE_TRANSFER_RSP         OtherCmdID = 1842
	OtherCmdID_CID_OTHER_FILE_SERVER_IP_REQ        OtherCmdID = 1843
	OtherCmdID_CID_OTHER_FILE_SERVER_IP_RSP        OtherCmdID = 1844
	OtherCmdID_CID_OTHER_ACCESS_TOKEN_VALIDATE_REQ OtherCmdID = 1845
)

var OtherCmdID_name = map[int32]string{
	1793: "CID_OTHER_HEARTBEAT",
	1794: "CID_OTHER_STOP_RECV_PACKET",
	1795: "CID_OTHER_VALIDATE_REQ",
	1796: "CID_OTHER_VALIDATE_RSP",
	1797: "CID_OTHER_GET_DEVICE_TOKEN_REQ",
	1798: "CID_OTHER_GET_DEVICE_TOKEN_RSP",
	1799: "CID_OTHER_ROLE_SET",
	1800: "CID_OTHER_ONLINE_USER_INFO",
	1801: "CID_OTHER_MSG_SERV_INFO",
	1802: "CID_OTHER_USER_STATUS_UPDATE",
	1803: "CID_OTHER_USER_CNT_UPDATE",
	1805: "CID_OTHER_SERVER_KICK_USER",
	1806: "CID_OTHER_LOGIN_STATUS_NOTIFY",
	1807: "CID_OTHER_PUSH_TO_USER_REQ",
	1808: "CID_OTHER_PUSH_TO_USER_RSP",
	1809: "CID_OTHER_GET_SHIELD_REQ",
	1810: "CID_OTHER_GET_SHIELD_RSP",
	1841: "CID_OTHER_FILE_TRANSFER_REQ",
	1842: "CID_OTHER_FILE_TRANSFER_RSP",
	1843: "CID_OTHER_FILE_SERVER_IP_REQ",
	1844: "CID_OTHER_FILE_SERVER_IP_RSP",
	1845: "CID_OTHER_ACCESS_TOKEN_VALIDATE_REQ",
}
var OtherCmdID_value = map[string]int32{
	"CID_OTHER_HEARTBEAT":                 1793,
	"CID_OTHER_STOP_RECV_PACKET":          1794,
	"CID_OTHER_VALIDATE_REQ":              1795,
	"CID_OTHER_VALIDATE_RSP":              1796,
	"CID_OTHER_GET_DEVICE_TOKEN_REQ":      1797,
	"CID_OTHER_GET_DEVICE_TOKEN_RSP":      1798,
	"CID_OTHER_ROLE_SET":                  1799,
	"CID_OTHER_ONLINE_USER_INFO":          1800,
	"CID_OTHER_MSG_SERV_INFO":             1801,
	"CID_OTHER_USER_STATUS_UPDATE":        1802,
	"CID_OTHER_USER_CNT_UPDATE":           1803,
	"CID_OTHER_SERVER_KICK_USER":          1805,
	"CID_OTHER_LOGIN_STATUS_NOTIFY":       1806,
	"CID_OTHER_PUSH_TO_USER_REQ":          1807,
	"CID_OTHER_PUSH_TO_USER_RSP":          1808,
	"CID_OTHER_GET_SHIELD_REQ":            1809,
	"CID_OTHER_GET_SHIELD_RSP":            1810,
	"CID_OTHER_FILE_TRANSFER_REQ":         1841,
	"CID_OTHER_FILE_TRANSFER_RSP":         1842,
	"CID_OTHER_FILE_SERVER_IP_REQ":        1843,
	"CID_OTHER_FILE_SERVER_IP_RSP":        1844,
	"CID_OTHER_ACCESS_TOKEN_VALIDATE_REQ": 1845,
}

func (x OtherCmdID) Enum() *OtherCmdID {
	p := new(OtherCmdID)
	*p = x
	return p
}
func (x OtherCmdID) String() string {
	return proto.EnumName(OtherCmdID_name, int32(x))
}
func (x *OtherCmdID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OtherCmdID_value, data, "OtherCmdID")
	if err != nil {
		return err
	}
	*x = OtherCmdID(value)
	return nil
}
func (OtherCmdID) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type ResultType int32

const (
	ResultType_REFUSE_REASON_NONE               ResultType = 0
	ResultType_REFUSE_REASON_NO_MSG_SERVER      ResultType = 1
	ResultType_REFUSE_REASON_MSG_SERVER_FULL    ResultType = 2
	ResultType_REFUSE_REASON_NO_DB_SERVER       ResultType = 3
	ResultType_REFUSE_REASON_NO_LOGIN_SERVER    ResultType = 4
	ResultType_REFUSE_REASON_NO_ROUTE_SERVER    ResultType = 5
	ResultType_REFUSE_REASON_DB_VALIDATE_FAILED ResultType = 6
	ResultType_REFUSE_REASON_VERSION_TOO_OLD    ResultType = 7
)

var ResultType_name = map[int32]string{
	0: "REFUSE_REASON_NONE",
	1: "REFUSE_REASON_NO_MSG_SERVER",
	2: "REFUSE_REASON_MSG_SERVER_FULL",
	3: "REFUSE_REASON_NO_DB_SERVER",
	4: "REFUSE_REASON_NO_LOGIN_SERVER",
	5: "REFUSE_REASON_NO_ROUTE_SERVER",
	6: "REFUSE_REASON_DB_VALIDATE_FAILED",
	7: "REFUSE_REASON_VERSION_TOO_OLD",
}
var ResultType_value = map[string]int32{
	"REFUSE_REASON_NONE":               0,
	"REFUSE_REASON_NO_MSG_SERVER":      1,
	"REFUSE_REASON_MSG_SERVER_FULL":    2,
	"REFUSE_REASON_NO_DB_SERVER":       3,
	"REFUSE_REASON_NO_LOGIN_SERVER":    4,
	"REFUSE_REASON_NO_ROUTE_SERVER":    5,
	"REFUSE_REASON_DB_VALIDATE_FAILED": 6,
	"REFUSE_REASON_VERSION_TOO_OLD":    7,
}

func (x ResultType) Enum() *ResultType {
	p := new(ResultType)
	*p = x
	return p
}
func (x ResultType) String() string {
	return proto.EnumName(ResultType_name, int32(x))
}
func (x *ResultType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ResultType_value, data, "ResultType")
	if err != nil {
		return err
	}
	*x = ResultType(value)
	return nil
}
func (ResultType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type KickReasonType int32

const (
	KickReasonType_KICK_REASON_DUPLICATE_USER KickReasonType = 1
	KickReasonType_KICK_REASON_MOBILE_KICK    KickReasonType = 2
)

var KickReasonType_name = map[int32]string{
	1: "KICK_REASON_DUPLICATE_USER",
	2: "KICK_REASON_MOBILE_KICK",
}
var KickReasonType_value = map[string]int32{
	"KICK_REASON_DUPLICATE_USER": 1,
	"KICK_REASON_MOBILE_KICK":    2,
}

func (x KickReasonType) Enum() *KickReasonType {
	p := new(KickReasonType)
	*p = x
	return p
}
func (x KickReasonType) String() string {
	return proto.EnumName(KickReasonType_name, int32(x))
}
func (x *KickReasonType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(KickReasonType_value, data, "KickReasonType")
	if err != nil {
		return err
	}
	*x = KickReasonType(value)
	return nil
}
func (KickReasonType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type OnlineListType int32

const (
	OnlineListType_ONLINE_LIST_TYPE_FRIEND_LIST OnlineListType = 1
)

var OnlineListType_name = map[int32]string{
	1: "ONLINE_LIST_TYPE_FRIEND_LIST",
}
var OnlineListType_value = map[string]int32{
	"ONLINE_LIST_TYPE_FRIEND_LIST": 1,
}

func (x OnlineListType) Enum() *OnlineListType {
	p := new(OnlineListType)
	*p = x
	return p
}
func (x OnlineListType) String() string {
	return proto.EnumName(OnlineListType_name, int32(x))
}
func (x *OnlineListType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OnlineListType_value, data, "OnlineListType")
	if err != nil {
		return err
	}
	*x = OnlineListType(value)
	return nil
}
func (OnlineListType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type UserStatType int32

const (
	UserStatType_USER_STATUS_ONLINE  UserStatType = 1
	UserStatType_USER_STATUS_OFFLINE UserStatType = 2
	UserStatType_USER_STATUS_LEAVE   UserStatType = 3
)

var UserStatType_name = map[int32]string{
	1: "USER_STATUS_ONLINE",
	2: "USER_STATUS_OFFLINE",
	3: "USER_STATUS_LEAVE",
}
var UserStatType_value = map[string]int32{
	"USER_STATUS_ONLINE":  1,
	"USER_STATUS_OFFLINE": 2,
	"USER_STATUS_LEAVE":   3,
}

func (x UserStatType) Enum() *UserStatType {
	p := new(UserStatType)
	*p = x
	return p
}
func (x UserStatType) String() string {
	return proto.EnumName(UserStatType_name, int32(x))
}
func (x *UserStatType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(UserStatType_value, data, "UserStatType")
	if err != nil {
		return err
	}
	*x = UserStatType(value)
	return nil
}
func (UserStatType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type SessionType int32

const (
	SessionType_SESSION_TYPE_SINGLE SessionType = 1
	SessionType_SESSION_TYPE_GROUP  SessionType = 2
)

var SessionType_name = map[int32]string{
	1: "SESSION_TYPE_SINGLE",
	2: "SESSION_TYPE_GROUP",
}
var SessionType_value = map[string]int32{
	"SESSION_TYPE_SINGLE": 1,
	"SESSION_TYPE_GROUP":  2,
}

func (x SessionType) Enum() *SessionType {
	p := new(SessionType)
	*p = x
	return p
}
func (x SessionType) String() string {
	return proto.EnumName(SessionType_name, int32(x))
}
func (x *SessionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SessionType_value, data, "SessionType")
	if err != nil {
		return err
	}
	*x = SessionType(value)
	return nil
}
func (SessionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type MsgType int32

const (
	MsgType_MSG_TYPE_SINGLE_TEXT   MsgType = 1
	MsgType_MSG_TYPE_SINGLE_AUDIO  MsgType = 2
	MsgType_MSG_TYPE_PUSH_MESSAGE  MsgType = 3
	MsgType_MSG_TYPE_INVITE_FRIEND MsgType = 4
	MsgType_MSG_TYPE_RESERVE1      MsgType = 5
	MsgType_MSG_TYPE_RESERVE2      MsgType = 6
	MsgType_MSG_TYPE_RESERVE3      MsgType = 7
	MsgType_MSG_TYPE_RESERVE4      MsgType = 8
	MsgType_MSG_TYPE_RESERVE5      MsgType = 9
	MsgType_MSG_TYPE_GROUP_TEXT    MsgType = 17
	MsgType_MSG_TYPE_GROUP_AUDIO   MsgType = 18
)

var MsgType_name = map[int32]string{
	1:  "MSG_TYPE_SINGLE_TEXT",
	2:  "MSG_TYPE_SINGLE_AUDIO",
	3:  "MSG_TYPE_PUSH_MESSAGE",
	4:  "MSG_TYPE_INVITE_FRIEND",
	5:  "MSG_TYPE_RESERVE1",
	6:  "MSG_TYPE_RESERVE2",
	7:  "MSG_TYPE_RESERVE3",
	8:  "MSG_TYPE_RESERVE4",
	9:  "MSG_TYPE_RESERVE5",
	17: "MSG_TYPE_GROUP_TEXT",
	18: "MSG_TYPE_GROUP_AUDIO",
}
var MsgType_value = map[string]int32{
	"MSG_TYPE_SINGLE_TEXT":   1,
	"MSG_TYPE_SINGLE_AUDIO":  2,
	"MSG_TYPE_PUSH_MESSAGE":  3,
	"MSG_TYPE_INVITE_FRIEND": 4,
	"MSG_TYPE_RESERVE1":      5,
	"MSG_TYPE_RESERVE2":      6,
	"MSG_TYPE_RESERVE3":      7,
	"MSG_TYPE_RESERVE4":      8,
	"MSG_TYPE_RESERVE5":      9,
	"MSG_TYPE_GROUP_TEXT":    17,
	"MSG_TYPE_GROUP_AUDIO":   18,
}

func (x MsgType) Enum() *MsgType {
	p := new(MsgType)
	*p = x
	return p
}
func (x MsgType) String() string {
	return proto.EnumName(MsgType_name, int32(x))
}
func (x *MsgType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MsgType_value, data, "MsgType")
	if err != nil {
		return err
	}
	*x = MsgType(value)
	return nil
}
func (MsgType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type ClientType int32

const (
	ClientType_CLIENT_TYPE_WINDOWS ClientType = 1
	ClientType_CLIENT_TYPE_MAC     ClientType = 2
	ClientType_CLIENT_TYPE_IOS     ClientType = 17
	ClientType_CLIENT_TYPE_ANDROID ClientType = 18
)

var ClientType_name = map[int32]string{
	1:  "CLIENT_TYPE_WINDOWS",
	2:  "CLIENT_TYPE_MAC",
	17: "CLIENT_TYPE_IOS",
	18: "CLIENT_TYPE_ANDROID",
}
var ClientType_value = map[string]int32{
	"CLIENT_TYPE_WINDOWS": 1,
	"CLIENT_TYPE_MAC":     2,
	"CLIENT_TYPE_IOS":     17,
	"CLIENT_TYPE_ANDROID": 18,
}

func (x ClientType) Enum() *ClientType {
	p := new(ClientType)
	*p = x
	return p
}
func (x ClientType) String() string {
	return proto.EnumName(ClientType_name, int32(x))
}
func (x *ClientType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ClientType_value, data, "ClientType")
	if err != nil {
		return err
	}
	*x = ClientType(value)
	return nil
}
func (ClientType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type GroupType int32

const (
	GroupType_GROUP_TYPE_NORMAL GroupType = 1
	GroupType_GROUP_TYPE_TMP    GroupType = 2
)

var GroupType_name = map[int32]string{
	1: "GROUP_TYPE_NORMAL",
	2: "GROUP_TYPE_TMP",
}
var GroupType_value = map[string]int32{
	"GROUP_TYPE_NORMAL": 1,
	"GROUP_TYPE_TMP":    2,
}

func (x GroupType) Enum() *GroupType {
	p := new(GroupType)
	*p = x
	return p
}
func (x GroupType) String() string {
	return proto.EnumName(GroupType_name, int32(x))
}
func (x *GroupType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GroupType_value, data, "GroupType")
	if err != nil {
		return err
	}
	*x = GroupType(value)
	return nil
}
func (GroupType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type GroupModifyType int32

const (
	GroupModifyType_GROUP_MODIFY_TYPE_ADD GroupModifyType = 1
	GroupModifyType_GROUP_MODIFY_TYPE_DEL GroupModifyType = 2
)

var GroupModifyType_name = map[int32]string{
	1: "GROUP_MODIFY_TYPE_ADD",
	2: "GROUP_MODIFY_TYPE_DEL",
}
var GroupModifyType_value = map[string]int32{
	"GROUP_MODIFY_TYPE_ADD": 1,
	"GROUP_MODIFY_TYPE_DEL": 2,
}

func (x GroupModifyType) Enum() *GroupModifyType {
	p := new(GroupModifyType)
	*p = x
	return p
}
func (x GroupModifyType) String() string {
	return proto.EnumName(GroupModifyType_name, int32(x))
}
func (x *GroupModifyType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GroupModifyType_value, data, "GroupModifyType")
	if err != nil {
		return err
	}
	*x = GroupModifyType(value)
	return nil
}
func (GroupModifyType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type FileType int32

const (
	FileType_FILE_TYPE_ONLINE  FileType = 1
	FileType_FILE_TYPE_OFFLINE FileType = 2
)

var FileType_name = map[int32]string{
	1: "FILE_TYPE_ONLINE",
	2: "FILE_TYPE_OFFLINE",
}
var FileType_value = map[string]int32{
	"FILE_TYPE_ONLINE":  1,
	"FILE_TYPE_OFFLINE": 2,
}

func (x FileType) Enum() *FileType {
	p := new(FileType)
	*p = x
	return p
}
func (x FileType) String() string {
	return proto.EnumName(FileType_name, int32(x))
}
func (x *FileType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FileType_value, data, "FileType")
	if err != nil {
		return err
	}
	*x = FileType(value)
	return nil
}
func (FileType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type ClientFileState int32

const (
	ClientFileState_CLIENT_FILE_PEER_READY ClientFileState = 0
	ClientFileState_CLIENT_FILE_CANCEL     ClientFileState = 1
	ClientFileState_CLIENT_FILE_REFUSE     ClientFileState = 2
	ClientFileState_CLIENT_FILE_DONE       ClientFileState = 3
)

var ClientFileState_name = map[int32]string{
	0: "CLIENT_FILE_PEER_READY",
	1: "CLIENT_FILE_CANCEL",
	2: "CLIENT_FILE_REFUSE",
	3: "CLIENT_FILE_DONE",
}
var ClientFileState_value = map[string]int32{
	"CLIENT_FILE_PEER_READY": 0,
	"CLIENT_FILE_CANCEL":     1,
	"CLIENT_FILE_REFUSE":     2,
	"CLIENT_FILE_DONE":       3,
}

func (x ClientFileState) Enum() *ClientFileState {
	p := new(ClientFileState)
	*p = x
	return p
}
func (x ClientFileState) String() string {
	return proto.EnumName(ClientFileState_name, int32(x))
}
func (x *ClientFileState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ClientFileState_value, data, "ClientFileState")
	if err != nil {
		return err
	}
	*x = ClientFileState(value)
	return nil
}
func (ClientFileState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

type ClientFileRole int32

const (
	ClientFileRole_CLIENT_REALTIME_SENDER  ClientFileRole = 1
	ClientFileRole_CLIENT_REALTIME_RECVER  ClientFileRole = 2
	ClientFileRole_CLIENT_OFFLINE_UPLOAD   ClientFileRole = 3
	ClientFileRole_CLIENT_OFFLINE_DOWNLOAD ClientFileRole = 4
)

var ClientFileRole_name = map[int32]string{
	1: "CLIENT_REALTIME_SENDER",
	2: "CLIENT_REALTIME_RECVER",
	3: "CLIENT_OFFLINE_UPLOAD",
	4: "CLIENT_OFFLINE_DOWNLOAD",
}
var ClientFileRole_value = map[string]int32{
	"CLIENT_REALTIME_SENDER":  1,
	"CLIENT_REALTIME_RECVER":  2,
	"CLIENT_OFFLINE_UPLOAD":   3,
	"CLIENT_OFFLINE_DOWNLOAD": 4,
}

func (x ClientFileRole) Enum() *ClientFileRole {
	p := new(ClientFileRole)
	*p = x
	return p
}
func (x ClientFileRole) String() string {
	return proto.EnumName(ClientFileRole_name, int32(x))
}
func (x *ClientFileRole) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ClientFileRole_value, data, "ClientFileRole")
	if err != nil {
		return err
	}
	*x = ClientFileRole(value)
	return nil
}
func (ClientFileRole) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type FileServerError int32

const (
	FileServerError_FILE_SERVER_ERRNO_OK                               FileServerError = 0
	FileServerError_FILE_SERVER_ERRNO_CREATE_TASK_ID_ERROR             FileServerError = 1
	FileServerError_FILE_SERVER_ERRNO_CREATE_TASK_ERROR                FileServerError = 2
	FileServerError_FILE_SERVER_ERRNO_LOGIN_INVALID_TOKEN              FileServerError = 3
	FileServerError_FILE_SERVER_ERRNO_INVALID_USER_FOR_TASK            FileServerError = 4
	FileServerError_FILE_SERVER_ERRNO_PULL_DATA_WITH_INVALID_TASK_ID   FileServerError = 5
	FileServerError_FILE_SERVER_ERRNO_PULL_DATA_ILLIEAGE_USER          FileServerError = 6
	FileServerError_FILE_SERVER_ERRNO_PULL_DATA_MKDIR_ERROR            FileServerError = 7
	FileServerError_FILE_SERVER_ERRNO_PULL_DATA_OPEN_FILE_ERROR        FileServerError = 8
	FileServerError_FILE_SERVER_ERRNO_PULL_DATA_READ_FILE_HEADER_ERROR FileServerError = 9
	FileServerError_FILE_SERVER_ERRNO_PULL_DATA_ALLOC_MEM_ERROR        FileServerError = 10
	FileServerError_FILE_SERVER_ERRNO_PULL_DATA_SEEK_OFFSET_ERROR      FileServerError = 11
	FileServerError_FILE_SERVER_ERRNO_PULL_DATA_FINISHED               FileServerError = 12
)

var FileServerError_name = map[int32]string{
	0:  "FILE_SERVER_ERRNO_OK",
	1:  "FILE_SERVER_ERRNO_CREATE_TASK_ID_ERROR",
	2:  "FILE_SERVER_ERRNO_CREATE_TASK_ERROR",
	3:  "FILE_SERVER_ERRNO_LOGIN_INVALID_TOKEN",
	4:  "FILE_SERVER_ERRNO_INVALID_USER_FOR_TASK",
	5:  "FILE_SERVER_ERRNO_PULL_DATA_WITH_INVALID_TASK_ID",
	6:  "FILE_SERVER_ERRNO_PULL_DATA_ILLIEAGE_USER",
	7:  "FILE_SERVER_ERRNO_PULL_DATA_MKDIR_ERROR",
	8:  "FILE_SERVER_ERRNO_PULL_DATA_OPEN_FILE_ERROR",
	9:  "FILE_SERVER_ERRNO_PULL_DATA_READ_FILE_HEADER_ERROR",
	10: "FILE_SERVER_ERRNO_PULL_DATA_ALLOC_MEM_ERROR",
	11: "FILE_SERVER_ERRNO_PULL_DATA_SEEK_OFFSET_ERROR",
	12: "FILE_SERVER_ERRNO_PULL_DATA_FINISHED",
}
var FileServerError_value = map[string]int32{
	"FILE_SERVER_ERRNO_OK":                               0,
	"FILE_SERVER_ERRNO_CREATE_TASK_ID_ERROR":             1,
	"FILE_SERVER_ERRNO_CREATE_TASK_ERROR":                2,
	"FILE_SERVER_ERRNO_LOGIN_INVALID_TOKEN":              3,
	"FILE_SERVER_ERRNO_INVALID_USER_FOR_TASK":            4,
	"FILE_SERVER_ERRNO_PULL_DATA_WITH_INVALID_TASK_ID":   5,
	"FILE_SERVER_ERRNO_PULL_DATA_ILLIEAGE_USER":          6,
	"FILE_SERVER_ERRNO_PULL_DATA_MKDIR_ERROR":            7,
	"FILE_SERVER_ERRNO_PULL_DATA_OPEN_FILE_ERROR":        8,
	"FILE_SERVER_ERRNO_PULL_DATA_READ_FILE_HEADER_ERROR": 9,
	"FILE_SERVER_ERRNO_PULL_DATA_ALLOC_MEM_ERROR":        10,
	"FILE_SERVER_ERRNO_PULL_DATA_SEEK_OFFSET_ERROR":      11,
	"FILE_SERVER_ERRNO_PULL_DATA_FINISHED":               12,
}

func (x FileServerError) Enum() *FileServerError {
	p := new(FileServerError)
	*p = x
	return p
}
func (x FileServerError) String() string {
	return proto.EnumName(FileServerError_name, int32(x))
}
func (x *FileServerError) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FileServerError_value, data, "FileServerError")
	if err != nil {
		return err
	}
	*x = FileServerError(value)
	return nil
}
func (FileServerError) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

type SessionStatusType int32

const (
	SessionStatusType_SESSION_STATUS_OK     SessionStatusType = 0
	SessionStatusType_SESSION_STATUS_DELETE SessionStatusType = 1
)

var SessionStatusType_name = map[int32]string{
	0: "SESSION_STATUS_OK",
	1: "SESSION_STATUS_DELETE",
}
var SessionStatusType_value = map[string]int32{
	"SESSION_STATUS_OK":     0,
	"SESSION_STATUS_DELETE": 1,
}

func (x SessionStatusType) Enum() *SessionStatusType {
	p := new(SessionStatusType)
	*p = x
	return p
}
func (x SessionStatusType) String() string {
	return proto.EnumName(SessionStatusType_name, int32(x))
}
func (x *SessionStatusType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SessionStatusType_value, data, "SessionStatusType")
	if err != nil {
		return err
	}
	*x = SessionStatusType(value)
	return nil
}
func (SessionStatusType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

type DepartmentStatusType int32

const (
	DepartmentStatusType_DEPT_STATUS_OK     DepartmentStatusType = 0
	DepartmentStatusType_DEPT_STATUS_DELETE DepartmentStatusType = 1
)

var DepartmentStatusType_name = map[int32]string{
	0: "DEPT_STATUS_OK",
	1: "DEPT_STATUS_DELETE",
}
var DepartmentStatusType_value = map[string]int32{
	"DEPT_STATUS_OK":     0,
	"DEPT_STATUS_DELETE": 1,
}

func (x DepartmentStatusType) Enum() *DepartmentStatusType {
	p := new(DepartmentStatusType)
	*p = x
	return p
}
func (x DepartmentStatusType) String() string {
	return proto.EnumName(DepartmentStatusType_name, int32(x))
}
func (x *DepartmentStatusType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DepartmentStatusType_value, data, "DepartmentStatusType")
	if err != nil {
		return err
	}
	*x = DepartmentStatusType(value)
	return nil
}
func (DepartmentStatusType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

type IpAddr struct {
	Ip               *string `protobuf:"bytes,1,req,name=ip" json:"ip,omitempty"`
	Port             *uint32 `protobuf:"varint,2,req,name=port" json:"port,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *IpAddr) Reset()                    { *m = IpAddr{} }
func (m *IpAddr) String() string            { return proto.CompactTextString(m) }
func (*IpAddr) ProtoMessage()               {}
func (*IpAddr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IpAddr) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *IpAddr) GetPort() uint32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

type UserInfo struct {
	UserId           *uint32 `protobuf:"varint,1,req,name=user_id" json:"user_id,omitempty"`
	UserGender       *uint32 `protobuf:"varint,2,req,name=user_gender" json:"user_gender,omitempty"`
	UserNickName     *string `protobuf:"bytes,3,req,name=user_nick_name" json:"user_nick_name,omitempty"`
	AvatarUrl        *string `protobuf:"bytes,4,req,name=avatar_url" json:"avatar_url,omitempty"`
	DepartmentId     *uint32 `protobuf:"varint,5,req,name=department_id" json:"department_id,omitempty"`
	Email            *string `protobuf:"bytes,6,req,name=email" json:"email,omitempty"`
	UserRealName     *string `protobuf:"bytes,7,req,name=user_real_name" json:"user_real_name,omitempty"`
	UserTel          *string `protobuf:"bytes,8,req,name=user_tel" json:"user_tel,omitempty"`
	UserDomain       *string `protobuf:"bytes,9,req,name=user_domain" json:"user_domain,omitempty"`
	Status           *uint32 `protobuf:"varint,10,req,name=status" json:"status,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UserInfo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *UserInfo) GetUserGender() uint32 {
	if m != nil && m.UserGender != nil {
		return *m.UserGender
	}
	return 0
}

func (m *UserInfo) GetUserNickName() string {
	if m != nil && m.UserNickName != nil {
		return *m.UserNickName
	}
	return ""
}

func (m *UserInfo) GetAvatarUrl() string {
	if m != nil && m.AvatarUrl != nil {
		return *m.AvatarUrl
	}
	return ""
}

func (m *UserInfo) GetDepartmentId() uint32 {
	if m != nil && m.DepartmentId != nil {
		return *m.DepartmentId
	}
	return 0
}

func (m *UserInfo) GetEmail() string {
	if m != nil && m.Email != nil {
		return *m.Email
	}
	return ""
}

func (m *UserInfo) GetUserRealName() string {
	if m != nil && m.UserRealName != nil {
		return *m.UserRealName
	}
	return ""
}

func (m *UserInfo) GetUserTel() string {
	if m != nil && m.UserTel != nil {
		return *m.UserTel
	}
	return ""
}

func (m *UserInfo) GetUserDomain() string {
	if m != nil && m.UserDomain != nil {
		return *m.UserDomain
	}
	return ""
}

func (m *UserInfo) GetStatus() uint32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

type ContactSessionInfo struct {
	SessionId           *uint32            `protobuf:"varint,1,req,name=session_id" json:"session_id,omitempty"`
	SessionType         *SessionType       `protobuf:"varint,2,req,name=session_type,enum=IM.BaseDefine.SessionType" json:"session_type,omitempty"`
	SessionStatus       *SessionStatusType `protobuf:"varint,3,req,name=session_status,enum=IM.BaseDefine.SessionStatusType" json:"session_status,omitempty"`
	UpdatedTime         *uint32            `protobuf:"varint,4,req,name=updated_time" json:"updated_time,omitempty"`
	LatestMsgId         *uint32            `protobuf:"varint,5,req,name=latest_msg_id" json:"latest_msg_id,omitempty"`
	LatestMsgData       []byte             `protobuf:"bytes,6,req,name=latest_msg_data" json:"latest_msg_data,omitempty"`
	LatestMsgType       *MsgType           `protobuf:"varint,7,req,name=latest_msg_type,enum=IM.BaseDefine.MsgType" json:"latest_msg_type,omitempty"`
	LatestMsgFromUserId *uint32            `protobuf:"varint,8,req,name=latest_msg_from_user_id" json:"latest_msg_from_user_id,omitempty"`
	XXX_unrecognized    []byte             `json:"-"`
}

func (m *ContactSessionInfo) Reset()                    { *m = ContactSessionInfo{} }
func (m *ContactSessionInfo) String() string            { return proto.CompactTextString(m) }
func (*ContactSessionInfo) ProtoMessage()               {}
func (*ContactSessionInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ContactSessionInfo) GetSessionId() uint32 {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return 0
}

func (m *ContactSessionInfo) GetSessionType() SessionType {
	if m != nil && m.SessionType != nil {
		return *m.SessionType
	}
	return SessionType_SESSION_TYPE_SINGLE
}

func (m *ContactSessionInfo) GetSessionStatus() SessionStatusType {
	if m != nil && m.SessionStatus != nil {
		return *m.SessionStatus
	}
	return SessionStatusType_SESSION_STATUS_OK
}

func (m *ContactSessionInfo) GetUpdatedTime() uint32 {
	if m != nil && m.UpdatedTime != nil {
		return *m.UpdatedTime
	}
	return 0
}

func (m *ContactSessionInfo) GetLatestMsgId() uint32 {
	if m != nil && m.LatestMsgId != nil {
		return *m.LatestMsgId
	}
	return 0
}

func (m *ContactSessionInfo) GetLatestMsgData() []byte {
	if m != nil {
		return m.LatestMsgData
	}
	return nil
}

func (m *ContactSessionInfo) GetLatestMsgType() MsgType {
	if m != nil && m.LatestMsgType != nil {
		return *m.LatestMsgType
	}
	return MsgType_MSG_TYPE_SINGLE_TEXT
}

func (m *ContactSessionInfo) GetLatestMsgFromUserId() uint32 {
	if m != nil && m.LatestMsgFromUserId != nil {
		return *m.LatestMsgFromUserId
	}
	return 0
}

type ContactSesAndUnreadCntInfo struct {
	SessionId           *uint32            `protobuf:"varint,1,req,name=session_id" json:"session_id,omitempty"`
	SessionType         *SessionType       `protobuf:"varint,2,req,name=session_type,enum=IM.BaseDefine.SessionType" json:"session_type,omitempty"`
	SessionStatus       *SessionStatusType `protobuf:"varint,3,req,name=session_status,enum=IM.BaseDefine.SessionStatusType" json:"session_status,omitempty"`
	UpdatedTime         *uint32            `protobuf:"varint,4,req,name=updated_time" json:"updated_time,omitempty"`
	LatestMsgId         *uint32            `protobuf:"varint,5,req,name=latest_msg_id" json:"latest_msg_id,omitempty"`
	LatestMsgData       []byte             `protobuf:"bytes,6,req,name=latest_msg_data" json:"latest_msg_data,omitempty"`
	LatestMsgType       *MsgType           `protobuf:"varint,7,req,name=latest_msg_type,enum=IM.BaseDefine.MsgType" json:"latest_msg_type,omitempty"`
	LatestMsgFromUserId *uint32            `protobuf:"varint,8,req,name=latest_msg_from_user_id" json:"latest_msg_from_user_id,omitempty"`
	UnreadCnt           *uint32            `protobuf:"varint,9,req,name=unread_cnt" json:"unread_cnt,omitempty"`
	XXX_unrecognized    []byte             `json:"-"`
}

func (m *ContactSesAndUnreadCntInfo) Reset()                    { *m = ContactSesAndUnreadCntInfo{} }
func (m *ContactSesAndUnreadCntInfo) String() string            { return proto.CompactTextString(m) }
func (*ContactSesAndUnreadCntInfo) ProtoMessage()               {}
func (*ContactSesAndUnreadCntInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ContactSesAndUnreadCntInfo) GetSessionId() uint32 {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return 0
}

func (m *ContactSesAndUnreadCntInfo) GetSessionType() SessionType {
	if m != nil && m.SessionType != nil {
		return *m.SessionType
	}
	return SessionType_SESSION_TYPE_SINGLE
}

func (m *ContactSesAndUnreadCntInfo) GetSessionStatus() SessionStatusType {
	if m != nil && m.SessionStatus != nil {
		return *m.SessionStatus
	}
	return SessionStatusType_SESSION_STATUS_OK
}

func (m *ContactSesAndUnreadCntInfo) GetUpdatedTime() uint32 {
	if m != nil && m.UpdatedTime != nil {
		return *m.UpdatedTime
	}
	return 0
}

func (m *ContactSesAndUnreadCntInfo) GetLatestMsgId() uint32 {
	if m != nil && m.LatestMsgId != nil {
		return *m.LatestMsgId
	}
	return 0
}

func (m *ContactSesAndUnreadCntInfo) GetLatestMsgData() []byte {
	if m != nil {
		return m.LatestMsgData
	}
	return nil
}

func (m *ContactSesAndUnreadCntInfo) GetLatestMsgType() MsgType {
	if m != nil && m.LatestMsgType != nil {
		return *m.LatestMsgType
	}
	return MsgType_MSG_TYPE_SINGLE_TEXT
}

func (m *ContactSesAndUnreadCntInfo) GetLatestMsgFromUserId() uint32 {
	if m != nil && m.LatestMsgFromUserId != nil {
		return *m.LatestMsgFromUserId
	}
	return 0
}

func (m *ContactSesAndUnreadCntInfo) GetUnreadCnt() uint32 {
	if m != nil && m.UnreadCnt != nil {
		return *m.UnreadCnt
	}
	return 0
}

type UserStat struct {
	UserId           *uint32       `protobuf:"varint,1,req,name=user_id" json:"user_id,omitempty"`
	Status           *UserStatType `protobuf:"varint,2,req,name=status,enum=IM.BaseDefine.UserStatType" json:"status,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *UserStat) Reset()                    { *m = UserStat{} }
func (m *UserStat) String() string            { return proto.CompactTextString(m) }
func (*UserStat) ProtoMessage()               {}
func (*UserStat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UserStat) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *UserStat) GetStatus() UserStatType {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return UserStatType_USER_STATUS_ONLINE
}

type ServerUserStat struct {
	UserId           *uint32       `protobuf:"varint,1,req,name=user_id" json:"user_id,omitempty"`
	Status           *UserStatType `protobuf:"varint,2,req,name=status,enum=IM.BaseDefine.UserStatType" json:"status,omitempty"`
	ClientType       *ClientType   `protobuf:"varint,3,req,name=client_type,enum=IM.BaseDefine.ClientType" json:"client_type,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *ServerUserStat) Reset()                    { *m = ServerUserStat{} }
func (m *ServerUserStat) String() string            { return proto.CompactTextString(m) }
func (*ServerUserStat) ProtoMessage()               {}
func (*ServerUserStat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ServerUserStat) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *ServerUserStat) GetStatus() UserStatType {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return UserStatType_USER_STATUS_ONLINE
}

func (m *ServerUserStat) GetClientType() ClientType {
	if m != nil && m.ClientType != nil {
		return *m.ClientType
	}
	return ClientType_CLIENT_TYPE_WINDOWS
}

type UnreadInfo struct {
	SessionId           *uint32      `protobuf:"varint,1,req,name=session_id" json:"session_id,omitempty"`
	SessionType         *SessionType `protobuf:"varint,2,req,name=session_type,enum=IM.BaseDefine.SessionType" json:"session_type,omitempty"`
	UnreadCnt           *uint32      `protobuf:"varint,3,req,name=unread_cnt" json:"unread_cnt,omitempty"`
	LatestMsgId         *uint32      `protobuf:"varint,4,req,name=latest_msg_id" json:"latest_msg_id,omitempty"`
	LatestMsgData       []byte       `protobuf:"bytes,5,req,name=latest_msg_data" json:"latest_msg_data,omitempty"`
	LatestMsgType       *MsgType     `protobuf:"varint,6,req,name=latest_msg_type,enum=IM.BaseDefine.MsgType" json:"latest_msg_type,omitempty"`
	LatestMsgFromUserId *uint32      `protobuf:"varint,7,req,name=latest_msg_from_user_id" json:"latest_msg_from_user_id,omitempty"`
	XXX_unrecognized    []byte       `json:"-"`
}

func (m *UnreadInfo) Reset()                    { *m = UnreadInfo{} }
func (m *UnreadInfo) String() string            { return proto.CompactTextString(m) }
func (*UnreadInfo) ProtoMessage()               {}
func (*UnreadInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UnreadInfo) GetSessionId() uint32 {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return 0
}

func (m *UnreadInfo) GetSessionType() SessionType {
	if m != nil && m.SessionType != nil {
		return *m.SessionType
	}
	return SessionType_SESSION_TYPE_SINGLE
}

func (m *UnreadInfo) GetUnreadCnt() uint32 {
	if m != nil && m.UnreadCnt != nil {
		return *m.UnreadCnt
	}
	return 0
}

func (m *UnreadInfo) GetLatestMsgId() uint32 {
	if m != nil && m.LatestMsgId != nil {
		return *m.LatestMsgId
	}
	return 0
}

func (m *UnreadInfo) GetLatestMsgData() []byte {
	if m != nil {
		return m.LatestMsgData
	}
	return nil
}

func (m *UnreadInfo) GetLatestMsgType() MsgType {
	if m != nil && m.LatestMsgType != nil {
		return *m.LatestMsgType
	}
	return MsgType_MSG_TYPE_SINGLE_TEXT
}

func (m *UnreadInfo) GetLatestMsgFromUserId() uint32 {
	if m != nil && m.LatestMsgFromUserId != nil {
		return *m.LatestMsgFromUserId
	}
	return 0
}

type MsgInfo struct {
	MsgId            *uint32  `protobuf:"varint,1,req,name=msg_id" json:"msg_id,omitempty"`
	FromSessionId    *uint32  `protobuf:"varint,2,req,name=from_session_id" json:"from_session_id,omitempty"`
	CreateTime       *uint32  `protobuf:"varint,3,req,name=create_time" json:"create_time,omitempty"`
	MsgType          *MsgType `protobuf:"varint,4,req,name=msg_type,enum=IM.BaseDefine.MsgType" json:"msg_type,omitempty"`
	MsgData          []byte   `protobuf:"bytes,5,req,name=msg_data" json:"msg_data,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *MsgInfo) Reset()                    { *m = MsgInfo{} }
func (m *MsgInfo) String() string            { return proto.CompactTextString(m) }
func (*MsgInfo) ProtoMessage()               {}
func (*MsgInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *MsgInfo) GetMsgId() uint32 {
	if m != nil && m.MsgId != nil {
		return *m.MsgId
	}
	return 0
}

func (m *MsgInfo) GetFromSessionId() uint32 {
	if m != nil && m.FromSessionId != nil {
		return *m.FromSessionId
	}
	return 0
}

func (m *MsgInfo) GetCreateTime() uint32 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *MsgInfo) GetMsgType() MsgType {
	if m != nil && m.MsgType != nil {
		return *m.MsgType
	}
	return MsgType_MSG_TYPE_SINGLE_TEXT
}

func (m *MsgInfo) GetMsgData() []byte {
	if m != nil {
		return m.MsgData
	}
	return nil
}

type GroupVersionInfo struct {
	GroupId          *uint32 `protobuf:"varint,1,req,name=group_id" json:"group_id,omitempty"`
	Version          *uint32 `protobuf:"varint,2,req,name=version" json:"version,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GroupVersionInfo) Reset()                    { *m = GroupVersionInfo{} }
func (m *GroupVersionInfo) String() string            { return proto.CompactTextString(m) }
func (*GroupVersionInfo) ProtoMessage()               {}
func (*GroupVersionInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GroupVersionInfo) GetGroupId() uint32 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *GroupVersionInfo) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

type GroupInfo struct {
	GroupId          *uint32    `protobuf:"varint,1,req,name=group_id" json:"group_id,omitempty"`
	Version          *uint32    `protobuf:"varint,2,req,name=version" json:"version,omitempty"`
	GroupName        *string    `protobuf:"bytes,3,req,name=group_name" json:"group_name,omitempty"`
	GroupAvatar      *string    `protobuf:"bytes,4,req,name=group_avatar" json:"group_avatar,omitempty"`
	GroupCreatorId   *uint32    `protobuf:"varint,5,req,name=group_creator_id" json:"group_creator_id,omitempty"`
	GroupType        *GroupType `protobuf:"varint,6,req,name=group_type,enum=IM.BaseDefine.GroupType" json:"group_type,omitempty"`
	ShieldStatus     *uint32    `protobuf:"varint,7,req,name=shield_status" json:"shield_status,omitempty"`
	GroupMemberList  []uint32   `protobuf:"varint,8,rep,name=group_member_list" json:"group_member_list,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *GroupInfo) Reset()                    { *m = GroupInfo{} }
func (m *GroupInfo) String() string            { return proto.CompactTextString(m) }
func (*GroupInfo) ProtoMessage()               {}
func (*GroupInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GroupInfo) GetGroupId() uint32 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *GroupInfo) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *GroupInfo) GetGroupName() string {
	if m != nil && m.GroupName != nil {
		return *m.GroupName
	}
	return ""
}

func (m *GroupInfo) GetGroupAvatar() string {
	if m != nil && m.GroupAvatar != nil {
		return *m.GroupAvatar
	}
	return ""
}

func (m *GroupInfo) GetGroupCreatorId() uint32 {
	if m != nil && m.GroupCreatorId != nil {
		return *m.GroupCreatorId
	}
	return 0
}

func (m *GroupInfo) GetGroupType() GroupType {
	if m != nil && m.GroupType != nil {
		return *m.GroupType
	}
	return GroupType_GROUP_TYPE_NORMAL
}

func (m *GroupInfo) GetShieldStatus() uint32 {
	if m != nil && m.ShieldStatus != nil {
		return *m.ShieldStatus
	}
	return 0
}

func (m *GroupInfo) GetGroupMemberList() []uint32 {
	if m != nil {
		return m.GroupMemberList
	}
	return nil
}

type UserTokenInfo struct {
	UserId           *uint32     `protobuf:"varint,1,req,name=user_id" json:"user_id,omitempty"`
	UserType         *ClientType `protobuf:"varint,2,req,name=user_type,enum=IM.BaseDefine.ClientType" json:"user_type,omitempty"`
	Token            *string     `protobuf:"bytes,3,req,name=token" json:"token,omitempty"`
	PushCount        *uint32     `protobuf:"varint,4,req,name=push_count" json:"push_count,omitempty"`
	PushType         *uint32     `protobuf:"varint,5,req,name=push_type" json:"push_type,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *UserTokenInfo) Reset()                    { *m = UserTokenInfo{} }
func (m *UserTokenInfo) String() string            { return proto.CompactTextString(m) }
func (*UserTokenInfo) ProtoMessage()               {}
func (*UserTokenInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UserTokenInfo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *UserTokenInfo) GetUserType() ClientType {
	if m != nil && m.UserType != nil {
		return *m.UserType
	}
	return ClientType_CLIENT_TYPE_WINDOWS
}

func (m *UserTokenInfo) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func (m *UserTokenInfo) GetPushCount() uint32 {
	if m != nil && m.PushCount != nil {
		return *m.PushCount
	}
	return 0
}

func (m *UserTokenInfo) GetPushType() uint32 {
	if m != nil && m.PushType != nil {
		return *m.PushType
	}
	return 0
}

type PushResult struct {
	UserToken        *string `protobuf:"bytes,1,req,name=user_token" json:"user_token,omitempty"`
	ResultCode       *uint32 `protobuf:"varint,2,req,name=result_code" json:"result_code,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PushResult) Reset()                    { *m = PushResult{} }
func (m *PushResult) String() string            { return proto.CompactTextString(m) }
func (*PushResult) ProtoMessage()               {}
func (*PushResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *PushResult) GetUserToken() string {
	if m != nil && m.UserToken != nil {
		return *m.UserToken
	}
	return ""
}

func (m *PushResult) GetResultCode() uint32 {
	if m != nil && m.ResultCode != nil {
		return *m.ResultCode
	}
	return 0
}

type ShieldStatus struct {
	UserId           *uint32 `protobuf:"varint,1,req,name=user_id" json:"user_id,omitempty"`
	GroupId          *uint32 `protobuf:"varint,2,req,name=group_id" json:"group_id,omitempty"`
	ShieldStatus     *uint32 `protobuf:"varint,3,req,name=shield_status" json:"shield_status,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ShieldStatus) Reset()                    { *m = ShieldStatus{} }
func (m *ShieldStatus) String() string            { return proto.CompactTextString(m) }
func (*ShieldStatus) ProtoMessage()               {}
func (*ShieldStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ShieldStatus) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *ShieldStatus) GetGroupId() uint32 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *ShieldStatus) GetShieldStatus() uint32 {
	if m != nil && m.ShieldStatus != nil {
		return *m.ShieldStatus
	}
	return 0
}

type OfflineFileInfo struct {
	FromUserId       *uint32 `protobuf:"varint,1,req,name=from_user_id" json:"from_user_id,omitempty"`
	TaskId           *string `protobuf:"bytes,2,req,name=task_id" json:"task_id,omitempty"`
	FileName         *string `protobuf:"bytes,3,req,name=file_name" json:"file_name,omitempty"`
	FileSize         *uint32 `protobuf:"varint,4,req,name=file_size" json:"file_size,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *OfflineFileInfo) Reset()                    { *m = OfflineFileInfo{} }
func (m *OfflineFileInfo) String() string            { return proto.CompactTextString(m) }
func (*OfflineFileInfo) ProtoMessage()               {}
func (*OfflineFileInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *OfflineFileInfo) GetFromUserId() uint32 {
	if m != nil && m.FromUserId != nil {
		return *m.FromUserId
	}
	return 0
}

func (m *OfflineFileInfo) GetTaskId() string {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return ""
}

func (m *OfflineFileInfo) GetFileName() string {
	if m != nil && m.FileName != nil {
		return *m.FileName
	}
	return ""
}

func (m *OfflineFileInfo) GetFileSize() uint32 {
	if m != nil && m.FileSize != nil {
		return *m.FileSize
	}
	return 0
}

type DepartInfo struct {
	DeptId           *uint32               `protobuf:"varint,1,req,name=dept_id" json:"dept_id,omitempty"`
	Priority         *uint32               `protobuf:"varint,2,req,name=priority" json:"priority,omitempty"`
	DeptName         *string               `protobuf:"bytes,3,req,name=dept_name" json:"dept_name,omitempty"`
	ParentDeptId     *uint32               `protobuf:"varint,4,req,name=parent_dept_id" json:"parent_dept_id,omitempty"`
	DeptStatus       *DepartmentStatusType `protobuf:"varint,5,req,name=dept_status,enum=IM.BaseDefine.DepartmentStatusType" json:"dept_status,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *DepartInfo) Reset()                    { *m = DepartInfo{} }
func (m *DepartInfo) String() string            { return proto.CompactTextString(m) }
func (*DepartInfo) ProtoMessage()               {}
func (*DepartInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *DepartInfo) GetDeptId() uint32 {
	if m != nil && m.DeptId != nil {
		return *m.DeptId
	}
	return 0
}

func (m *DepartInfo) GetPriority() uint32 {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return 0
}

func (m *DepartInfo) GetDeptName() string {
	if m != nil && m.DeptName != nil {
		return *m.DeptName
	}
	return ""
}

func (m *DepartInfo) GetParentDeptId() uint32 {
	if m != nil && m.ParentDeptId != nil {
		return *m.ParentDeptId
	}
	return 0
}

func (m *DepartInfo) GetDeptStatus() DepartmentStatusType {
	if m != nil && m.DeptStatus != nil {
		return *m.DeptStatus
	}
	return DepartmentStatusType_DEPT_STATUS_OK
}

func init() {
	proto.RegisterType((*IpAddr)(nil), "IM.BaseDefine.IpAddr")
	proto.RegisterType((*UserInfo)(nil), "IM.BaseDefine.UserInfo")
	proto.RegisterType((*ContactSessionInfo)(nil), "IM.BaseDefine.ContactSessionInfo")
	proto.RegisterType((*ContactSesAndUnreadCntInfo)(nil), "IM.BaseDefine.ContactSesAndUnreadCntInfo")
	proto.RegisterType((*UserStat)(nil), "IM.BaseDefine.UserStat")
	proto.RegisterType((*ServerUserStat)(nil), "IM.BaseDefine.ServerUserStat")
	proto.RegisterType((*UnreadInfo)(nil), "IM.BaseDefine.UnreadInfo")
	proto.RegisterType((*MsgInfo)(nil), "IM.BaseDefine.MsgInfo")
	proto.RegisterType((*GroupVersionInfo)(nil), "IM.BaseDefine.GroupVersionInfo")
	proto.RegisterType((*GroupInfo)(nil), "IM.BaseDefine.GroupInfo")
	proto.RegisterType((*UserTokenInfo)(nil), "IM.BaseDefine.UserTokenInfo")
	proto.RegisterType((*PushResult)(nil), "IM.BaseDefine.PushResult")
	proto.RegisterType((*ShieldStatus)(nil), "IM.BaseDefine.ShieldStatus")
	proto.RegisterType((*OfflineFileInfo)(nil), "IM.BaseDefine.OfflineFileInfo")
	proto.RegisterType((*DepartInfo)(nil), "IM.BaseDefine.DepartInfo")
	proto.RegisterEnum("IM.BaseDefine.ServiceID", ServiceID_name, ServiceID_value)
	proto.RegisterEnum("IM.BaseDefine.LoginCmdID", LoginCmdID_name, LoginCmdID_value)
	proto.RegisterEnum("IM.BaseDefine.BuddyListCmdID", BuddyListCmdID_name, BuddyListCmdID_value)
	proto.RegisterEnum("IM.BaseDefine.MessageCmdID", MessageCmdID_name, MessageCmdID_value)
	proto.RegisterEnum("IM.BaseDefine.GroupCmdID", GroupCmdID_name, GroupCmdID_value)
	proto.RegisterEnum("IM.BaseDefine.FileCmdID", FileCmdID_name, FileCmdID_value)
	proto.RegisterEnum("IM.BaseDefine.SwitchServiceCmdID", SwitchServiceCmdID_name, SwitchServiceCmdID_value)
	proto.RegisterEnum("IM.BaseDefine.OtherCmdID", OtherCmdID_name, OtherCmdID_value)
	proto.RegisterEnum("IM.BaseDefine.ResultType", ResultType_name, ResultType_value)
	proto.RegisterEnum("IM.BaseDefine.KickReasonType", KickReasonType_name, KickReasonType_value)
	proto.RegisterEnum("IM.BaseDefine.OnlineListType", OnlineListType_name, OnlineListType_value)
	proto.RegisterEnum("IM.BaseDefine.UserStatType", UserStatType_name, UserStatType_value)
	proto.RegisterEnum("IM.BaseDefine.SessionType", SessionType_name, SessionType_value)
	proto.RegisterEnum("IM.BaseDefine.MsgType", MsgType_name, MsgType_value)
	proto.RegisterEnum("IM.BaseDefine.ClientType", ClientType_name, ClientType_value)
	proto.RegisterEnum("IM.BaseDefine.GroupType", GroupType_name, GroupType_value)
	proto.RegisterEnum("IM.BaseDefine.GroupModifyType", GroupModifyType_name, GroupModifyType_value)
	proto.RegisterEnum("IM.BaseDefine.FileType", FileType_name, FileType_value)
	proto.RegisterEnum("IM.BaseDefine.ClientFileState", ClientFileState_name, ClientFileState_value)
	proto.RegisterEnum("IM.BaseDefine.ClientFileRole", ClientFileRole_name, ClientFileRole_value)
	proto.RegisterEnum("IM.BaseDefine.FileServerError", FileServerError_name, FileServerError_value)
	proto.RegisterEnum("IM.BaseDefine.SessionStatusType", SessionStatusType_name, SessionStatusType_value)
	proto.RegisterEnum("IM.BaseDefine.DepartmentStatusType", DepartmentStatusType_name, DepartmentStatusType_value)
}

var fileDescriptor0 = []byte{
	// 2770 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x19, 0x49, 0x73, 0xdb, 0xd6,
	0xb9, 0xa4, 0x68, 0x8a, 0xfa, 0x2c, 0xd1, 0x4f, 0xf0, 0xa6, 0xd8, 0x59, 0x1c, 0xd9, 0xd9, 0x98,
	0x58, 0x49, 0x9c, 0xa5, 0x39, 0x75, 0x06, 0x02, 0x20, 0x11, 0x23, 0x90, 0x60, 0x09, 0x50, 0xa9,
	0x2f, 0xc5, 0x30, 0x22, 0x24, 0xb3, 0xa6, 0x48, 0x0d, 0x09, 0xa6, 0xe3, 0x1e, 0x3a, 0x95, 0x25,
	0xef, 0xce, 0xda, 0xce, 0xf4, 0xd0, 0x5b, 0xcf, 0xbd, 0x74, 0xfb, 0x0f, 0x9d, 0xce, 0xf4, 0xd0,
	0xfe, 0x81, 0x4e, 0x6f, 0xfd, 0x19, 0xfd, 0xde, 0xf7, 0xde, 0x23, 0x01, 0x90, 0xa2, 0x3d, 0x99,
	0x1c, 0x7b, 0x13, 0xbf, 0x7d, 0xff, 0xbe, 0x07, 0xc1, 0x59, 0xbb, 0xb2, 0xb6, 0xde, 0x1c, 0x84,
	0x66, 0xb8, 0xdb, 0xee, 0x86, 0x6b, 0x07, 0xfd, 0x5e, 0xd4, 0xd3, 0x96, 0x12, 0xc0, 0xd5, 0x55,
	0xc8, 0xdb, 0x07, 0x7a, 0xab, 0xd5, 0xd7, 0x00, 0xb2, 0xed, 0x83, 0x95, 0xcc, 0x95, 0xec, 0x9b,
	0x0b, 0xda, 0x22, 0xe4, 0x0e, 0x7a, 0xfd, 0x68, 0x25, 0x8b, 0xbf, 0x96, 0x56, 0xff, 0x99, 0x81,
	0x42, 0x63, 0x10, 0xf6, 0xed, 0xee, 0x6e, 0x4f, 0x3b, 0x03, 0xf3, 0x43, 0xfc, 0x3b, 0x68, 0xb7,
	0x88, 0x76, 0x49, 0x3b, 0x0b, 0xa7, 0x09, 0xb0, 0x17, 0x76, 0x5b, 0x61, 0x5f, 0xb0, 0x68, 0x17,
	0xa0, 0x48, 0xc0, 0x6e, 0x7b, 0xe7, 0x76, 0xd0, 0x6d, 0xee, 0x87, 0x2b, 0x73, 0x24, 0x18, 0xb5,
	0x34, 0x3f, 0x6f, 0x46, 0xcd, 0x7e, 0x30, 0xec, 0x77, 0x56, 0x72, 0x04, 0x3b, 0x0f, 0x4b, 0xad,
	0xf0, 0xa0, 0xd9, 0x8f, 0xf6, 0xc3, 0x6e, 0xc4, 0xe5, 0x9e, 0x22, 0x11, 0x4b, 0x70, 0x2a, 0xdc,
	0x6f, 0xb6, 0x3b, 0x2b, 0x79, 0xa2, 0x52, 0x12, 0xfb, 0x61, 0xb3, 0x23, 0x24, 0xce, 0x13, 0x9c,
	0x41, 0x81, 0xe0, 0x51, 0xd8, 0x59, 0x29, 0x10, 0x44, 0x19, 0xd4, 0xea, 0x21, 0x7b, 0x77, 0x65,
	0x81, 0x80, 0x45, 0xc8, 0x0f, 0xa2, 0x66, 0x34, 0x1c, 0xac, 0x00, 0xf9, 0xf4, 0x87, 0x2c, 0x68,
	0x46, 0xaf, 0x1b, 0x35, 0x77, 0x22, 0x2f, 0x1c, 0x0c, 0xda, 0xbd, 0x2e, 0x79, 0x87, 0xf6, 0x0d,
	0xc4, 0xcf, 0xb1, 0x83, 0xef, 0xc1, 0xa2, 0x82, 0x45, 0x77, 0x0e, 0x42, 0xf2, 0xb0, 0x78, 0xe3,
	0xd2, 0x5a, 0x32, 0xba, 0x52, 0x8a, 0x8f, 0x14, 0xda, 0x27, 0x50, 0x54, 0x1c, 0x52, 0xe9, 0x1c,
	0xf1, 0x5c, 0x99, 0xce, 0xe3, 0x11, 0x0d, 0x71, 0x9e, 0x83, 0xc5, 0xe1, 0x41, 0xab, 0x19, 0x85,
	0xad, 0x20, 0x6a, 0xa3, 0x8f, 0x39, 0xb2, 0x00, 0x23, 0xd4, 0x41, 0xd8, 0x20, 0x0a, 0xf6, 0x07,
	0x7b, 0xe3, 0x08, 0x5d, 0x84, 0x33, 0x31, 0x30, 0x72, 0x35, 0x29, 0x56, 0x8b, 0xda, 0xbb, 0x09,
	0x04, 0x19, 0x3d, 0x4f, 0x06, 0x5c, 0x48, 0x19, 0x50, 0x19, 0xec, 0x91, 0xda, 0x57, 0xe0, 0x62,
	0x8c, 0x61, 0xb7, 0xdf, 0xdb, 0x0f, 0x54, 0x92, 0x0b, 0x14, 0xae, 0xbf, 0x65, 0xe1, 0xd2, 0x38,
	0x5c, 0x7a, 0xb7, 0xd5, 0xe8, 0x62, 0x22, 0x5a, 0x46, 0x37, 0xfa, 0x7f, 0xd8, 0x4e, 0x0e, 0x1b,
	0x8f, 0xcb, 0x90, 0x02, 0x15, 0xec, 0x74, 0x23, 0xaa, 0xc4, 0xa5, 0xd5, 0xb2, 0x68, 0x26, 0x6e,
	0xfd, 0x64, 0x33, 0xbd, 0x3d, 0x2a, 0x53, 0x11, 0xae, 0xcb, 0x29, 0xcd, 0x8a, 0x93, 0xab, 0x5f,
	0xfd, 0x25, 0x14, 0xbd, 0xb0, 0xff, 0x79, 0xd8, 0xff, 0x7e, 0xe4, 0x69, 0x6b, 0x70, 0x7a, 0xa7,
	0xd3, 0xe6, 0x4d, 0x48, 0xbe, 0x8b, 0xe0, 0xbf, 0x90, 0xe2, 0x30, 0x88, 0x82, 0xf4, 0xff, 0x37,
	0x03, 0x20, 0xea, 0xe0, 0x7b, 0x2c, 0x82, 0x64, 0xc8, 0xe6, 0xa6, 0x27, 0x32, 0x77, 0x52, 0x22,
	0x4f, 0x9d, 0x94, 0xc8, 0xfc, 0x77, 0x4d, 0xe4, 0x3c, 0x25, 0xed, 0x28, 0x03, 0xf3, 0x48, 0x4c,
	0x7e, 0xe2, 0x28, 0x91, 0x66, 0x64, 0x94, 0x19, 0xc4, 0x11, 0x73, 0x3e, 0xab, 0x26, 0xe3, 0x0e,
	0x7a, 0x12, 0x85, 0xa2, 0x28, 0x85, 0x2f, 0x6f, 0x42, 0x61, 0x64, 0x54, 0x6e, 0xa6, 0x51, 0x4c,
	0x50, 0x8e, 0xfd, 0x5a, 0xfd, 0x08, 0xd8, 0x66, 0xbf, 0x37, 0x3c, 0xd8, 0x0e, 0xfb, 0xa3, 0x89,
	0x85, 0x54, 0x7b, 0x1c, 0x36, 0xb6, 0x07, 0x8b, 0xe0, 0x73, 0x41, 0x20, 0xe7, 0xf7, 0xbf, 0x32,
	0xb0, 0x40, 0x7c, 0xcf, 0xc9, 0xc0, 0x73, 0x20, 0x48, 0x62, 0x93, 0x1b, 0x5b, 0x4c, 0xc0, 0xc4,
	0xfc, 0x96, 0xb3, 0x7b, 0x05, 0x98, 0x80, 0x92, 0xa3, 0xbd, 0xfe, 0xb8, 0xcb, 0xde, 0x51, 0x32,
	0x62, 0xe1, 0x5f, 0x49, 0x79, 0x4a, 0x46, 0x91, 0xaf, 0x98, 0xe1, 0xc1, 0xad, 0x76, 0xd8, 0x69,
	0xa9, 0xce, 0xa7, 0xb0, 0x6b, 0x2f, 0xc0, 0xb2, 0x10, 0xb2, 0x1f, 0xee, 0x7f, 0x86, 0xf9, 0xe8,
	0xb4, 0x07, 0x11, 0xb6, 0xd6, 0x1c, 0x3a, 0x75, 0x9c, 0x81, 0x25, 0x5e, 0xbd, 0x7e, 0xef, 0x76,
	0xd8, 0x9d, 0xbe, 0x99, 0xde, 0x81, 0x05, 0xb1, 0x1a, 0xc6, 0x95, 0x77, 0x72, 0x35, 0xf3, 0x7d,
	0x13, 0x71, 0x59, 0xe3, 0x4d, 0x75, 0x30, 0x1c, 0xdc, 0x0a, 0x76, 0x7a, 0x43, 0xac, 0x43, 0x51,
	0x70, 0xcb, 0xb0, 0x40, 0x30, 0x12, 0x48, 0x6e, 0x62, 0x4a, 0xa0, 0x86, 0xa0, 0x7a, 0x38, 0x18,
	0x76, 0x22, 0x2a, 0x5e, 0xd2, 0x48, 0x82, 0x32, 0x6a, 0x1d, 0xf5, 0x09, 0x8b, 0xa2, 0x5a, 0xa1,
	0x4c, 0x49, 0x19, 0x16, 0x3d, 0xf2, 0x57, 0x0c, 0xb1, 0x49, 0xdb, 0xe3, 0x59, 0xca, 0xaa, 0x26,
	0x48, 0x86, 0x88, 0xea, 0x69, 0xf5, 0xa7, 0x70, 0xc6, 0xdd, 0xdd, 0xed, 0xa0, 0x33, 0x1b, 0xed,
	0x4e, 0x48, 0x81, 0xc0, 0x54, 0x25, 0x4a, 0x78, 0x94, 0xe5, 0xa8, 0x39, 0xb8, 0xad, 0x04, 0x2e,
	0x70, 0x6f, 0x76, 0x91, 0x25, 0x9e, 0x64, 0x05, 0x1a, 0xb4, 0x7f, 0x21, 0x87, 0xe8, 0xea, 0x6f,
	0xb0, 0xc9, 0x4d, 0x5a, 0xcf, 0x2a, 0xc8, 0xb8, 0xac, 0xa3, 0x84, 0xa1, 0x07, 0xfd, 0x76, 0xaf,
	0xdf, 0x8e, 0xee, 0x48, 0x43, 0x51, 0x08, 0x91, 0xc4, 0xe4, 0xe2, 0xf2, 0x46, 0x09, 0x7c, 0xb2,
	0x28, 0x66, 0x11, 0xd0, 0x4f, 0xe0, 0x34, 0x01, 0xa4, 0x47, 0xa7, 0x28, 0x47, 0x57, 0x53, 0x39,
	0x32, 0x47, 0xc7, 0xc1, 0x78, 0xe2, 0x97, 0xbe, 0xc1, 0x9a, 0xe6, 0xc3, 0xaf, 0xbd, 0x13, 0xda,
	0x26, 0xe6, 0x6e, 0xc1, 0xb3, 0xcd, 0xc0, 0x71, 0x37, 0xed, 0x2a, 0xcb, 0x60, 0x1a, 0x8a, 0xfc,
	0xe7, 0x7a, 0xc3, 0x34, 0x6f, 0x06, 0x8e, 0xed, 0xf9, 0x2c, 0xab, 0x9d, 0x86, 0x79, 0x0e, 0xab,
	0x78, 0x9b, 0x6c, 0x4e, 0xd1, 0x6f, 0xd6, 0xdd, 0x46, 0x8d, 0xe5, 0xf0, 0xdc, 0x29, 0xf0, 0x9f,
	0x1b, 0xb6, 0x63, 0xb1, 0x53, 0x68, 0xac, 0xc6, 0x7f, 0x79, 0x9f, 0xda, 0xbe, 0x51, 0x0e, 0x3c,
	0xab, 0xbe, 0x6d, 0x1b, 0x16, 0xcb, 0x2b, 0x26, 0xd7, 0x2f, 0x5b, 0x75, 0x36, 0x8f, 0x8e, 0x2f,
	0xf2, 0x9f, 0x76, 0xd5, 0xb7, 0xea, 0x55, 0xdd, 0x61, 0x85, 0xd2, 0xf1, 0x1c, 0x80, 0xd3, 0xdb,
	0x6b, 0x77, 0x8d, 0xfd, 0x16, 0x1a, 0xf5, 0x22, 0x5c, 0x34, 0x94, 0x51, 0x41, 0xdd, 0xfa, 0x31,
	0xd7, 0xcd, 0xa5, 0x21, 0xf7, 0x61, 0x36, 0x8d, 0xf5, 0x62, 0xd8, 0xbb, 0xd9, 0x49, 0xde, 0x06,
	0xe2, 0x84, 0x7b, 0x47, 0x53, 0x78, 0xc7, 0xd8, 0xe3, 0xac, 0x76, 0x19, 0x2e, 0x24, 0x79, 0xe9,
	0x2f, 0xb7, 0xe1, 0xb3, 0x7b, 0x13, 0x48, 0x6f, 0x8c, 0xbc, 0x9f, 0xc5, 0x6e, 0x3e, 0x3b, 0x46,
	0x6e, 0xd9, 0xc6, 0x16, 0x09, 0x66, 0x0f, 0xb2, 0xda, 0xcb, 0xf0, 0x42, 0x52, 0xa6, 0x69, 0xf1,
	0xa8, 0xf8, 0xee, 0x96, 0x55, 0x65, 0x0f, 0x27, 0xf0, 0x5e, 0x02, 0xff, 0x28, 0x8b, 0x03, 0xf6,
	0x52, 0x92, 0x9f, 0x4b, 0xaf, 0x19, 0x86, 0x63, 0x5b, 0x55, 0x9f, 0x3d, 0x9e, 0x20, 0xf0, 0x92,
	0x04, 0x4f, 0xb2, 0x38, 0x37, 0xaf, 0x9e, 0x10, 0x91, 0x40, 0x37, 0x0c, 0xcb, 0xf3, 0x84, 0xae,
	0xa7, 0xd9, 0xd2, 0xdf, 0xf3, 0x50, 0x5c, 0x1f, 0xb6, 0x5a, 0x77, 0x1c, 0x9c, 0x16, 0x22, 0x15,
	0x37, 0xe0, 0xba, 0x91, 0x28, 0x08, 0x94, 0x60, 0xa0, 0xe0, 0xc0, 0x70, 0xab, 0xbe, 0x6e, 0xf8,
	0x98, 0x65, 0xcf, 0xb3, 0x5d, 0x12, 0xdc, 0xb0, 0xb0, 0x5e, 0x0e, 0x73, 0xda, 0x07, 0xb0, 0xf6,
	0xbc, 0x3c, 0x5e, 0xcd, 0xad, 0x7a, 0x16, 0xbb, 0x9b, 0xd3, 0x5e, 0x85, 0x17, 0x53, 0x4c, 0x9e,
	0xaf, 0xfb, 0x0d, 0x2f, 0xa8, 0xba, 0xbe, 0xbd, 0x71, 0x93, 0x1d, 0xe5, 0xb4, 0xd7, 0xe0, 0x4a,
	0x8a, 0x84, 0x7b, 0x82, 0x75, 0xb4, 0xe1, 0x8e, 0xd4, 0x1f, 0xe7, 0xb4, 0xd7, 0xe1, 0xd5, 0x19,
	0x64, 0x52, 0xe3, 0xbd, 0x69, 0x74, 0x75, 0xab, 0xe2, 0x6e, 0x5b, 0x71, 0x97, 0xd8, 0xfd, 0xe7,
	0xa2, 0xf3, 0xd8, 0x83, 0x9c, 0x76, 0x0d, 0x5e, 0x49, 0xd1, 0xe9, 0x8e, 0x23, 0x74, 0x2b, 0xeb,
	0x1e, 0x4e, 0x73, 0x22, 0x46, 0x25, 0x8d, 0x7b, 0x94, 0x53, 0x49, 0x4b, 0x39, 0xe1, 0xa9, 0xa0,
	0x28, 0x81, 0x8f, 0x73, 0xda, 0x5b, 0x70, 0x6d, 0x36, 0xa5, 0x14, 0xfa, 0x64, 0x1a, 0xa9, 0x51,
	0xd6, 0xab, 0x9b, 0x56, 0xa0, 0x6f, 0xeb, 0xbe, 0x3e, 0x36, 0xf3, 0x69, 0x4e, 0x2b, 0xc1, 0x6b,
	0xcf, 0x20, 0x95, 0x62, 0xbf, 0x98, 0x46, 0x5b, 0x33, 0x64, 0xb9, 0x25, 0x73, 0xf8, 0xe5, 0x34,
	0x13, 0x52, 0xc1, 0x94, 0xa4, 0x5f, 0x4d, 0x8b, 0xbb, 0x69, 0xd5, 0xf4, 0xba, 0x5f, 0xe1, 0xa5,
	0xa4, 0x4c, 0xfd, 0x3a, 0xa7, 0xbd, 0x01, 0xab, 0xb3, 0xe8, 0xa4, 0x9d, 0xdf, 0xe4, 0xb4, 0x8f,
	0xe0, 0xbd, 0xe9, 0x75, 0xa9, 0x74, 0xeb, 0x55, 0x33, 0x68, 0x54, 0xeb, 0x96, 0x6e, 0x06, 0x86,
	0xd0, 0xc1, 0xbe, 0xfd, 0x2e, 0x6c, 0x1e, 0xfb, 0x75, 0xae, 0xf4, 0xfb, 0x39, 0x58, 0xac, 0xe0,
	0x61, 0xd3, 0xdc, 0x0b, 0x45, 0x2b, 0x2d, 0xc3, 0xa2, 0x21, 0xe6, 0x68, 0x60, 0x62, 0x0c, 0xd9,
	0x61, 0x1e, 0x37, 0x13, 0x8b, 0x83, 0xb0, 0x1f, 0xb7, 0xd8, 0xdd, 0x04, 0x98, 0xa4, 0x72, 0xf0,
	0x51, 0x5e, 0x0d, 0x99, 0x11, 0x58, 0x86, 0xea, 0x38, 0x8f, 0xdb, 0xfe, 0x9c, 0xc2, 0xf8, 0x76,
	0xc5, 0x1a, 0x45, 0xe7, 0x5e, 0x5e, 0xbb, 0x04, 0xe7, 0x53, 0x28, 0x19, 0x90, 0xfb, 0x79, 0x35,
	0x3a, 0x38, 0x2e, 0xe9, 0x36, 0x31, 0x3f, 0xc8, 0x6b, 0x57, 0xe0, 0xf2, 0x54, 0x02, 0x29, 0xe2,
	0x61, 0x42, 0xb3, 0x0c, 0x8d, 0x60, 0x7e, 0x94, 0xd0, 0x2c, 0x51, 0x92, 0xed, 0x71, 0x5e, 0x5b,
	0x85, 0x97, 0x14, 0x6e, 0xd3, 0xf2, 0x03, 0x47, 0xf7, 0x91, 0x89, 0x7e, 0x22, 0x94, 0xc7, 0xfd,
	0xc9, 0xb3, 0x68, 0xbc, 0x1a, 0x7b, 0x9a, 0x57, 0xd3, 0x53, 0xd1, 0xac, 0xdf, 0x8c, 0xcb, 0xf8,
	0x62, 0x26, 0xde, 0x63, 0x5f, 0xe6, 0x4b, 0x4f, 0x71, 0xf1, 0xd0, 0x2d, 0x25, 0x52, 0x24, 0x55,
	0xd2, 0x76, 0xc3, 0xf0, 0xd6, 0x2b, 0xba, 0x93, 0x74, 0xeb, 0xb0, 0xa0, 0x5d, 0x85, 0x97, 0x4f,
	0xa2, 0x51, 0xd3, 0xac, 0xa0, 0x96, 0x85, 0x20, 0x4a, 0x0c, 0xa8, 0xa3, 0x82, 0x5a, 0x42, 0x09,
	0xa4, 0x64, 0x3d, 0x2e, 0x68, 0x2f, 0xc1, 0xca, 0x18, 0x6b, 0x60, 0xd0, 0xfd, 0x58, 0x3e, 0x0b,
	0xca, 0xa3, 0x14, 0x5a, 0xe5, 0xb4, 0xa0, 0xa6, 0x90, 0xc4, 0x8b, 0x9e, 0xad, 0x58, 0x95, 0xf5,
	0xd8, 0x14, 0x7a, 0x50, 0x50, 0x53, 0x68, 0x3a, 0x95, 0xca, 0x6e, 0xca, 0x57, 0xaf, 0x6c, 0x5b,
	0x8e, 0xfa, 0x31, 0xca, 0x73, 0x4a, 0x63, 0x8a, 0x48, 0x65, 0x3c, 0x25, 0x2a, 0xa9, 0x51, 0xd6,
	0xf1, 0x93, 0x42, 0xe9, 0x1f, 0x59, 0x58, 0xe0, 0xc7, 0x98, 0xc8, 0xc6, 0x45, 0xd0, 0x0c, 0x79,
	0x5c, 0x8c, 0xb7, 0x17, 0x3b, 0x84, 0xa9, 0x08, 0x8f, 0xdd, 0x05, 0xbc, 0x18, 0x8b, 0x23, 0x04,
	0x1f, 0x3d, 0x16, 0x3b, 0x02, 0x95, 0x0b, 0x02, 0xd6, 0x1a, 0x38, 0x6c, 0xa9, 0xd5, 0xb8, 0xa8,
	0xe3, 0x13, 0x91, 0x58, 0x5d, 0xf7, 0x40, 0xf5, 0x21, 0x21, 0x95, 0xc3, 0xf7, 0x01, 0xcf, 0x9c,
	0xe5, 0x18, 0x58, 0xba, 0xf8, 0x00, 0xf0, 0x7a, 0x3c, 0x33, 0x82, 0x4b, 0x9f, 0x1e, 0x82, 0xca,
	0x27, 0x41, 0xcb, 0xba, 0x17, 0xb8, 0x1b, 0x1b, 0x8e, 0x5d, 0x25, 0x81, 0xec, 0xd1, 0x2c, 0xb4,
	0xc7, 0x1e, 0x27, 0xd1, 0xba, 0x69, 0x26, 0xb8, 0x9f, 0x24, 0xd1, 0xa6, 0xe5, 0x24, 0xd0, 0x4f,
	0xa1, 0x74, 0x1d, 0x0f, 0xb2, 0x9f, 0xb7, 0xa3, 0x9d, 0x5b, 0xf2, 0xe0, 0x4b, 0xc4, 0x55, 0x9e,
	0x69, 0xb5, 0x1b, 0x98, 0x8f, 0x8a, 0xc9, 0x0e, 0x17, 0x4b, 0xff, 0x3e, 0x05, 0xe0, 0x46, 0xb7,
	0xc2, 0xbe, 0xa0, 0x93, 0xf3, 0x86, 0xce, 0xb6, 0xa0, 0x6c, 0xe1, 0x48, 0x5d, 0xc7, 0x72, 0x63,
	0x87, 0x45, 0x35, 0x38, 0x04, 0x06, 0xef, 0x07, 0x9e, 0x6a, 0x63, 0x3b, 0xa8, 0xe1, 0xa0, 0xb2,
	0x7c, 0x76, 0xb7, 0xa8, 0xc2, 0x2a, 0x08, 0xb6, 0x75, 0xc7, 0x36, 0x65, 0x19, 0xb3, 0xa3, 0x13,
	0x91, 0x18, 0xf3, 0xe3, 0xa2, 0xaa, 0x13, 0x81, 0xe4, 0x3d, 0x2b, 0xee, 0xa1, 0x80, 0x8e, 0x14,
	0x92, 0x70, 0xef, 0x99, 0x44, 0x28, 0xe9, 0x7e, 0x51, 0xb9, 0x29, 0x88, 0xea, 0x2e, 0x2f, 0x09,
	0x34, 0xee, 0x41, 0xca, 0x7a, 0xb7, 0x4a, 0x01, 0x1b, 0x9d, 0x08, 0xec, 0x61, 0x51, 0x35, 0xa8,
	0x20, 0xe0, 0x03, 0x83, 0x9f, 0x97, 0x02, 0xfb, 0xa8, 0xa8, 0x2e, 0x15, 0x81, 0x25, 0x3e, 0xb9,
	0xe5, 0x1a, 0x35, 0xee, 0x08, 0x7b, 0x5c, 0x54, 0x4d, 0x1a, 0x23, 0xe1, 0x73, 0x53, 0xe2, 0x9f,
	0xa4, 0xe3, 0x47, 0xb7, 0x6b, 0xec, 0x6a, 0xfc, 0xa2, 0xa8, 0x06, 0x91, 0x20, 0x98, 0xba, 0x4a,
	0x53, 0x42, 0x6a, 0x0d, 0xaf, 0x8c, 0xee, 0x8f, 0xce, 0x0d, 0xf6, 0xd5, 0x4c, 0x02, 0x8c, 0xd0,
	0xd7, 0x45, 0x55, 0x3d, 0xe3, 0x30, 0xca, 0xee, 0xe5, 0xfc, 0xdf, 0xcc, 0x40, 0x23, 0xf7, 0xb7,
	0x45, 0xb5, 0x1c, 0x04, 0x9a, 0x2a, 0xd0, 0xaf, 0xeb, 0x55, 0x6f, 0x43, 0x1a, 0xf0, 0xc7, 0xd9,
	0x14, 0x28, 0xe3, 0x4f, 0xa9, 0x58, 0x8a, 0xb6, 0x15, 0xd1, 0xb0, 0x69, 0xc4, 0xb0, 0x3f, 0x3f,
	0x83, 0x04, 0xa5, 0xfc, 0xa5, 0xa8, 0x8e, 0x25, 0x41, 0x22, 0x6e, 0x5a, 0x59, 0x0a, 0x89, 0xd2,
	0xfb, 0x6b, 0xb1, 0xf4, 0xdb, 0x2c, 0x80, 0x78, 0x71, 0xd2, 0xcb, 0x15, 0x1f, 0x2c, 0x75, 0x6b,
	0x03, 0x43, 0xc2, 0x17, 0xaa, 0x47, 0xd7, 0x47, 0xd5, 0x62, 0x3f, 0xc0, 0xc8, 0x5d, 0x4e, 0xc3,
	0x47, 0x75, 0x80, 0x09, 0xca, 0xa0, 0x51, 0x2f, 0x25, 0x09, 0xc6, 0xd8, 0x60, 0x03, 0xc7, 0x08,
	0xe3, 0x87, 0xfd, 0xa5, 0x09, 0x19, 0xe6, 0xba, 0x12, 0x31, 0x37, 0x29, 0x02, 0xf1, 0x32, 0xd3,
	0x82, 0x24, 0x37, 0x95, 0x04, 0xe7, 0xa7, 0xaf, 0x42, 0x80, 0x4f, 0xae, 0x6b, 0x70, 0x25, 0x49,
	0x82, 0x2a, 0x46, 0x4e, 0x6f, 0xe8, 0x18, 0x2e, 0x13, 0x1f, 0x60, 0x13, 0x82, 0x90, 0x99, 0x4e,
	0x17, 0xdf, 0x75, 0x03, 0xd7, 0x31, 0xd9, 0x7c, 0xa9, 0x02, 0xc5, 0xad, 0xf6, 0xce, 0xed, 0x7a,
	0xd8, 0x1c, 0xc8, 0xef, 0x49, 0xe8, 0x00, 0xd5, 0xa4, 0x12, 0xdc, 0xa8, 0x39, 0xb6, 0xc1, 0xc5,
	0x52, 0x91, 0x66, 0xb0, 0x8d, 0x2f, 0xc6, 0xf1, 0x15, 0x77, 0x9d, 0x27, 0x87, 0x83, 0x58, 0xb6,
	0x74, 0x03, 0x8a, 0x6e, 0x97, 0xbf, 0xad, 0xf9, 0x53, 0x82, 0xc4, 0x5d, 0x81, 0x17, 0x65, 0xaf,
	0xd1, 0xb6, 0xf4, 0x6f, 0xd6, 0xd0, 0xc0, 0x3a, 0x3e, 0x52, 0x4c, 0xf1, 0xd0, 0xcc, 0x94, 0xb6,
	0x61, 0x31, 0xf1, 0x55, 0x0d, 0xb3, 0x13, 0x6f, 0x2f, 0xc1, 0x8d, 0x8a, 0x2f, 0xc2, 0xd9, 0x04,
	0x5c, 0xcc, 0x3c, 0x0c, 0xf9, 0x79, 0x58, 0x8e, 0x23, 0x1c, 0x4b, 0xdf, 0xb6, 0xd8, 0x5c, 0xe9,
	0x47, 0x70, 0x3a, 0xfe, 0x9d, 0x0c, 0xd9, 0xd5, 0xe5, 0x46, 0x46, 0x78, 0x76, 0x75, 0xd3, 0xe1,
	0x72, 0xf9, 0xf3, 0x35, 0x8e, 0x10, 0x8f, 0xdc, 0x6c, 0xe9, 0x77, 0x59, 0xfa, 0x84, 0x45, 0xcc,
	0x2b, 0x70, 0x8e, 0x4e, 0xa9, 0x31, 0x63, 0xe0, 0x5b, 0x3f, 0x41, 0xeb, 0xf1, 0x12, 0x3a, 0x9f,
	0xc6, 0xe8, 0x0d, 0xd3, 0x76, 0xd1, 0xae, 0x38, 0x8a, 0xfa, 0xb0, 0x82, 0x6a, 0xf4, 0x4d, 0xb4,
	0x0d, 0x8f, 0xa4, 0x0b, 0x23, 0x94, 0x5d, 0xdd, 0xb6, 0x7d, 0x15, 0x14, 0x4c, 0x3f, 0xba, 0x33,
	0xc2, 0xe1, 0x3a, 0xe0, 0x29, 0x7f, 0x1f, 0x53, 0x3e, 0x05, 0x7c, 0x83, 0xe5, 0xa7, 0x81, 0x3f,
	0xc0, 0xc7, 0xf6, 0x14, 0xf0, 0x87, 0xac, 0x30, 0x0d, 0xfc, 0x11, 0x5b, 0xe0, 0xb1, 0x19, 0x81,
	0xc5, 0xaa, 0x26, 0xef, 0x96, 0x13, 0x7e, 0x0b, 0x84, 0x70, 0x4e, 0x2b, 0xdd, 0x02, 0x88, 0x7d,
	0x0b, 0x42, 0x01, 0xe2, 0xe5, 0x29, 0x48, 0x3f, 0xb5, 0xab, 0xa6, 0xfb, 0xa9, 0x87, 0xe1, 0x39,
	0x8b, 0xcb, 0x31, 0x86, 0xa8, 0xe8, 0x06, 0x06, 0x26, 0x05, 0xb4, 0x5d, 0x0f, 0x55, 0xa5, 0x44,
	0xe0, 0x75, 0x5d, 0x77, 0x6d, 0x13, 0x35, 0x7d, 0x2c, 0x3f, 0xc6, 0xc9, 0xef, 0x5e, 0xcb, 0xd2,
	0x40, 0x4e, 0x24, 0xee, 0x30, 0xf1, 0x01, 0x23, 0x06, 0xf6, 0x2b, 0x3c, 0x7f, 0x9b, 0x70, 0x86,
	0xf8, 0x2a, 0xbd, 0x56, 0x7b, 0xf7, 0x0e, 0x71, 0x63, 0x46, 0x04, 0x59, 0xc5, 0x35, 0x71, 0x9c,
	0x4a, 0x4d, 0xa6, 0x29, 0xf2, 0x38, 0x89, 0xc2, 0xdd, 0x8a, 0x82, 0x7e, 0x08, 0x05, 0x7e, 0x9d,
	0xc8, 0x0f, 0xe7, 0x4c, 0x4c, 0x34, 0x8e, 0x1e, 0x95, 0x26, 0x5a, 0x15, 0x83, 0xaa, 0xc2, 0x2c,
	0x0d, 0xd0, 0x4f, 0x8a, 0x11, 0x67, 0xe7, 0xf5, 0x1d, 0xf2, 0xc4, 0x4b, 0x2f, 0xc5, 0xed, 0x61,
	0xd1, 0xd8, 0xd4, 0xcd, 0x9b, 0x38, 0x7e, 0xb0, 0x10, 0xe3, 0x38, 0x43, 0xaf, 0x1a, 0x96, 0x23,
	0x0a, 0x34, 0x0e, 0x17, 0x2d, 0x8d, 0x61, 0x44, 0x5b, 0xe2, 0x70, 0x93, 0x0f, 0xb1, 0xb9, 0xd2,
	0xaf, 0x32, 0x78, 0x0d, 0x8d, 0xb4, 0xd6, 0x7b, 0x9d, 0xb8, 0x52, 0x54, 0xe5, 0xd0, 0x7b, 0xc0,
	0xc3, 0x5a, 0xa3, 0x76, 0x9e, 0x82, 0xe3, 0x4b, 0x1d, 0x71, 0x54, 0xc0, 0x12, 0xa7, 0x0e, 0x0c,
	0x1c, 0x06, 0xae, 0x6e, 0x62, 0x01, 0xe3, 0x14, 0x48, 0xa1, 0x30, 0xe1, 0x55, 0x42, 0xe6, 0x4a,
	0xff, 0xc9, 0xc1, 0x19, 0x72, 0x99, 0x3e, 0xb6, 0x5b, 0xfd, 0x7e, 0xaf, 0xcf, 0x2b, 0x29, 0x3e,
	0xc5, 0xad, 0x7a, 0x1d, 0xa7, 0x9a, 0xbb, 0x85, 0x6e, 0x97, 0xe0, 0xf5, 0x49, 0x8c, 0x3c, 0x71,
	0x7d, 0xdd, 0xdb, 0xe2, 0x77, 0x3b, 0x02, 0x5d, 0x6e, 0xed, 0x1b, 0x70, 0x75, 0x36, 0xad, 0x20,
	0xcc, 0xe2, 0x83, 0xf3, 0xb5, 0x49, 0x42, 0x31, 0x67, 0xb1, 0xdf, 0xf8, 0xa4, 0x14, 0xab, 0x02,
	0x5d, 0x79, 0x1b, 0xde, 0x98, 0x24, 0x55, 0x44, 0x34, 0x58, 0x36, 0xdc, 0x3a, 0x49, 0xc7, 0xe6,
	0xfc, 0x10, 0xde, 0x9b, 0x24, 0x1e, 0x5f, 0x90, 0x78, 0x5b, 0x95, 0xc7, 0x0a, 0x84, 0xf1, 0xd8,
	0xbb, 0xd7, 0xe1, 0xad, 0x59, 0x5c, 0xb6, 0x83, 0xa1, 0xc4, 0xc1, 0x20, 0x46, 0x6c, 0x7e, 0xba,
	0x45, 0x63, 0xf2, 0xca, 0x96, 0x69, 0xd7, 0xa5, 0xa7, 0xf3, 0xda, 0xbb, 0xf0, 0xf6, 0x2c, 0x62,
	0xb7, 0x86, 0xfb, 0x90, 0x08, 0x04, 0x43, 0x41, 0xfb, 0x18, 0x6e, 0xcc, 0x62, 0xa0, 0xf7, 0x9e,
	0xb8, 0x4b, 0xf1, 0x2f, 0x4b, 0x29, 0x5a, 0x78, 0x96, 0x22, 0xdd, 0x71, 0x5c, 0x83, 0xdf, 0xf6,
	0x92, 0x01, 0xb4, 0xf7, 0xe1, 0xfa, 0x2c, 0x06, 0xcf, 0xb2, 0xb6, 0x78, 0xf5, 0xe0, 0x79, 0x26,
	0x59, 0x4e, 0xe3, 0x4a, 0xbf, 0x36, 0x8b, 0x65, 0xc3, 0xae, 0xda, 0x5e, 0x19, 0x77, 0xdb, 0x62,
	0xc9, 0x82, 0xe5, 0xc9, 0x7f, 0x6b, 0x61, 0x1f, 0xaa, 0x51, 0xae, 0xb6, 0x04, 0xaf, 0x30, 0xac,
	0xe3, 0x14, 0x18, 0x1b, 0xdb, 0xc2, 0x9b, 0x2c, 0x53, 0x5a, 0x87, 0x73, 0xd3, 0x3e, 0x97, 0xf2,
	0x81, 0x62, 0x5a, 0x35, 0x3f, 0x21, 0x06, 0xfb, 0x30, 0x0e, 0x53, 0x32, 0xd6, 0xb1, 0x17, 0x76,
	0x7a, 0xfb, 0x6b, 0xfb, 0xbd, 0xbd, 0xe1, 0xcf, 0xda, 0xe1, 0x5a, 0x14, 0x89, 0xff, 0x1c, 0x7f,
	0x36, 0xdc, 0x2d, 0xcf, 0xfd, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x05, 0x41, 0x65, 0x96, 0x54, 0x1e,
	0x00, 0x00,
}
